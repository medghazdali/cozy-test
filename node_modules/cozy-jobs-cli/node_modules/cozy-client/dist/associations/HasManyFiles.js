"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _omit = _interopRequireDefault(require("lodash/omit"));

var _HasMany2 = _interopRequireDefault(require("./HasMany"));

var _dsl = require("../queries/dsl");

var _store = require("../store");

/**
 *  This class is only used for photos albums relationships.
 *  Behind the hood, the queries uses a view returning the files sorted
 *  by datetime, with a cursor-based pagination.
 */
var HasManyFiles =
/*#__PURE__*/
function (_HasMany) {
  (0, _inherits2.default)(HasManyFiles, _HasMany);

  function HasManyFiles() {
    (0, _classCallCheck2.default)(this, HasManyFiles);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(HasManyFiles).apply(this, arguments));
  }

  (0, _createClass2.default)(HasManyFiles, [{
    key: "fetchMore",
    value: function () {
      var _fetchMore = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee2() {
        var _this = this;

        var queryDef, relationships, lastRelationship;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                queryDef = new _dsl.QueryDefinition({
                  doctype: 'io.cozy.files'
                });
                relationships = this.getRelationship().data; // Get last datetime for cursor

                lastRelationship = relationships[relationships.length - 1];
                _context2.next = 5;
                return this.dispatch(
                /*#__PURE__*/
                function () {
                  var _ref = (0, _asyncToGenerator2.default)(
                  /*#__PURE__*/
                  _regenerator.default.mark(function _callee(dispatch, getState) {
                    var lastRelDoc, lastDatetime, cursorKey, startDocId, cursorView, response;
                    return _regenerator.default.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            lastRelDoc = (0, _store.getDocumentFromState)(getState(), lastRelationship._type, lastRelationship._id); // Photos always have a datetime field in metadata

                            lastDatetime = lastRelDoc.attributes.metadata.datetime; // cursor-based pagination

                            cursorKey = [_this.target._type, _this.target._id, lastDatetime];
                            startDocId = relationships[relationships.length - 1]._id;
                            cursorView = [cursorKey, startDocId];
                            _context.next = 7;
                            return _this.query(queryDef.referencedBy(_this.target).offsetCursor(cursorView));

                          case 7:
                            response = _context.sent;
                            // Remove first returned element, used as starting point for the query
                            response.data.shift();
                            _context.next = 11;
                            return _this.dispatch(_this.updateRelationshipData(function (previousRelationshipData) {
                              return (0, _objectSpread2.default)({}, previousRelationshipData, {
                                data: [].concat((0, _toConsumableArray2.default)(previousRelationshipData.data), (0, _toConsumableArray2.default)(response.data)),
                                next: response.next
                              });
                            }));

                          case 11:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }));

                  return function (_x, _x2) {
                    return _ref.apply(this, arguments);
                  };
                }());

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function fetchMore() {
        return _fetchMore.apply(this, arguments);
      };
    }()
  }, {
    key: "addById",
    value: function () {
      var _addById = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee3(ids) {
        var _this2 = this;

        var relations;
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                ids = Array.isArray(ids) ? ids : [ids];
                relations = ids.map(function (id) {
                  return {
                    _id: id,
                    _type: _this2.doctype
                  };
                });
                _context3.next = 4;
                return this.mutate(this.insertDocuments(relations));

              case 4:
                _context3.next = 6;
                return (0, _get2.default)((0, _getPrototypeOf2.default)(HasManyFiles.prototype), "addById", this).call(this, ids);

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function addById(_x3) {
        return _addById.apply(this, arguments);
      };
    }()
  }, {
    key: "removeById",
    value: function () {
      var _removeById = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee4(ids) {
        var _this3 = this;

        var relations;
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                ids = Array.isArray(ids) ? ids : [ids];
                relations = ids.map(function (id) {
                  return {
                    _id: id,
                    _type: _this3.doctype
                  };
                });
                _context4.next = 4;
                return this.mutate(this.removeDocuments(relations));

              case 4:
                _context4.next = 6;
                return (0, _get2.default)((0, _getPrototypeOf2.default)(HasManyFiles.prototype), "removeById", this).call(this, ids);

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function removeById(_x4) {
        return _removeById.apply(this, arguments);
      };
    }()
  }, {
    key: "insertDocuments",
    value: function insertDocuments(referencedDocs) {
      if (this.target._type === 'io.cozy.files') {
        return _dsl.Mutations.addReferencedBy(this.target, referencedDocs);
      } else if (referencedDocs[0]._type === 'io.cozy.files') {
        return _dsl.Mutations.addReferencesTo(this.target, referencedDocs);
      } else {
        throw new Error('Either the document or the references should be io.cozy.files');
      }
    }
  }, {
    key: "removeDocuments",
    value: function removeDocuments(referencedDocs) {
      if (this.target._type === 'io.cozy.files') {
        return _dsl.Mutations.removeReferencedBy(this.target, referencedDocs);
      } else if (referencedDocs[0]._type === 'io.cozy.files') {
        return _dsl.Mutations.removeReferencesTo(this.target, referencedDocs);
      } else {
        throw new Error('Either the document or the references should be io.cozy.files');
      }
    }
  }, {
    key: "dehydrate",
    value: function dehydrate(doc) {
      // HasManyFiles relationships are stored on the file doctype, not the document the files are related to
      return (0, _omit.default)(doc, [this.name, "relationships.".concat(this.name)]);
    }
  }], [{
    key: "query",
    value: function query(document, client, assoc) {
      var key = [document._type, document._id];
      var cursor = [key, ''];
      var queryAll = client.find(assoc.doctype);
      return queryAll.referencedBy(document).offsetCursor(cursor);
    }
  }]);
  return HasManyFiles;
}(_HasMany2.default);

exports.default = HasManyFiles;