"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.create = exports.resolveClass = exports.attachRelationships = exports.responseToRelationship = exports.pickTypeAndId = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _pick = _interopRequireDefault(require("lodash/pick"));

var _pickBy = _interopRequireDefault(require("lodash/pickBy"));

var _Association = _interopRequireDefault(require("./Association"));

var _HasOne = _interopRequireDefault(require("./HasOne"));

var _HasOneInPlace = _interopRequireDefault(require("./HasOneInPlace"));

var _HasMany = _interopRequireDefault(require("./HasMany"));

var _HasManyInPlace = _interopRequireDefault(require("./HasManyInPlace"));

var _HasManyFiles = _interopRequireDefault(require("./HasManyFiles"));

var pickTypeAndId = function pickTypeAndId(x) {
  return (0, _pick.default)(x, '_type', '_id');
};

exports.pickTypeAndId = pickTypeAndId;

var applyHelper = function applyHelper(fn, objOrArr) {
  return Array.isArray(objOrArr) ? objOrArr.map(fn) : fn(objOrArr);
};

var responseToRelationship = function responseToRelationship(response) {
  return (0, _pickBy.default)({
    data: applyHelper(pickTypeAndId, response.data),
    meta: response.meta,
    next: response.next,
    skip: response.skip,
    bookmark: response.bookmark
  });
};

exports.responseToRelationship = responseToRelationship;

var attachRelationship = function attachRelationship(doc, relationships) {
  return (0, _objectSpread2.default)({}, doc, {
    relationships: (0, _objectSpread2.default)({}, doc.relationships, relationships)
  });
};

var attachRelationships = function attachRelationships(response, relationshipsByDocId) {
  if (Array.isArray(response.data)) {
    return (0, _objectSpread2.default)({}, response, {
      data: response.data.map(function (doc) {
        return attachRelationship(doc, relationshipsByDocId[doc._id]);
      })
    });
  } else {
    var doc = response.data;
    return (0, _objectSpread2.default)({}, response, {
      data: attachRelationship(doc, relationshipsByDocId[doc._id])
    });
  }
};

exports.attachRelationships = attachRelationships;
var aliases = {
  'io.cozy.files:has-many': _HasManyFiles.default,
  'has-many': _HasMany.default,
  'belongs-to-in-place': _HasOneInPlace.default,
  'has-one': _HasOne.default,
  'has-one-in-place': _HasOneInPlace.default,
  'has-many-in-place': _HasManyInPlace.default
  /**
   * Returns the relationship class for a given doctype/type.
   *
   * In the schema definition, some classes have string aliases
   * so you do not have to import directly the association.
   *
   * Some doctypes can have built-in overriden relationships.
   *
   * @private
   */

};

var resolveClass = function resolveClass(doctype, type) {
  if (type === undefined) {
    throw new Error('Undefined type for ' + doctype);
  }

  if (typeof type !== 'string') {
    return type;
  } else {
    var qualified = "".concat(doctype, ":").concat(type);
    var cls = aliases[qualified] || aliases[type];

    if (!cls) {
      throw new Error("Unknown association '".concat(type, "'"));
    } else {
      return cls;
    }
  }
};

exports.resolveClass = resolveClass;

var create = function create(target, _ref, accessors) {
  var name = _ref.name,
      type = _ref.type,
      doctype = _ref.doctype;

  if (target[name] instanceof _Association.default) {
    throw new Error("Association ".concat(name, " already exists"));
  }

  return new type(target, name, doctype, accessors);
};

exports.create = create;