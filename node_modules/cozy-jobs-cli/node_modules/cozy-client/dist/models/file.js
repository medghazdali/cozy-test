"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalize = normalize;
exports.ensureFilePath = ensureFilePath;
exports.getParentFolderId = getParentFolderId;
exports.isShortcut = exports.isNote = exports.isDirectory = exports.isFile = exports.splitFilename = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _get = _interopRequireDefault(require("lodash/get"));

var _isString = _interopRequireDefault(require("lodash/isString"));

var FILE_TYPE = 'file';
var DIR_TYPE = 'directory';
var FILENAME_WITH_EXTENSION_REGEX = /(.+)(\..*)$/;
/**
 * Returns base filename and extension
 *
 * @param {object} file An io.cozy.files
 * @returns {object}  {filename, extension}
 */

var splitFilename = function splitFilename(file) {
  if (!(0, _isString.default)(file.name)) throw new Error('file should have a name property ');

  if (file.type === 'file') {
    var match = file.name.match(FILENAME_WITH_EXTENSION_REGEX);

    if (match) {
      return {
        filename: match[1],
        extension: match[2]
      };
    }
  }

  return {
    filename: file.name,
    extension: ''
  };
};
/**
 *
 * @param {File} file io.cozy.files
 */


exports.splitFilename = splitFilename;

var isFile = function isFile(file) {
  return file && file.type === FILE_TYPE;
};
/**
 *
 * @param {File} file io.cozy.files
 */


exports.isFile = isFile;

var isDirectory = function isDirectory(file) {
  return file && file.type === DIR_TYPE;
};
/**
 *
 * @param {File} file io.cozy.files
 */


exports.isDirectory = isDirectory;

var isNote = function isNote(file) {
  if (file && file.name && file.name.endsWith('.cozy-note') && file.type === FILE_TYPE && file.metadata && file.metadata.content !== undefined && file.metadata.schema !== undefined && file.metadata.title !== undefined && file.metadata.version !== undefined) return true;
  return false;
};
/**
 *
 * @param {File} file io.cozy.files
 * @returns {boolean} true if the file is a shortcut
 */


exports.isNote = isNote;

var isShortcut = function isShortcut(file) {
  return file && file.class === 'shortcut';
};
/**
 * Normalizes an object representing a io.cozy.files object
 *
 * Ensures existence of `_id` and `_type`
 *
 * @public
 * @param {object} file - object representing the file
 * @returns {object} full normalized object
 */


exports.isShortcut = isShortcut;

function normalize(file) {
  var id = file._id || file.id;
  var doctype = file._type || 'io.cozy.files';
  return (0, _objectSpread2.default)({
    _id: id,
    id: id,
    _type: doctype
  }, file);
}
/**
 * Ensure the file has a `path` attribute, or build it
 *
 * @public
 * @param {object} file - object representing the file
 * @param {object} parent - parent directory for the file
 * @returns {object} file object with path attribute
 */


function ensureFilePath(file, parent) {
  if (file.path) return file;
  if (!parent || !parent.path) throw new Error("Could not define a file path for ".concat(file._id || file.id));
  var path = parent.path + '/' + file.name;
  return (0, _objectSpread2.default)({
    path: path
  }, file);
}
/**
 * Get the id of the parent folder (`null` for the root folder)
 *
 * @param {object} file  - io.cozy.files document
 * @returns {string|null} id of the parent folder, if any
 */


function getParentFolderId(file) {
  var parentId = (0, _get.default)(file, 'attributes.dir_id');
  return parentId === '' ? null : parentId;
}