"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var PropTypes = require('prop-types');

var get = require('lodash/get');

var log = require('../log');

var Document = require('../Document');

var getPrimaryOrFirst = function getPrimaryOrFirst(property) {
  return function (obj) {
    if (!obj[property] || obj[property].length === 0) return '';
    return obj[property].find(function (property) {
      return property.primary;
    }) || obj[property][0];
  };
};
/**
 * Class representing the contact model.
 * @extends Document
 */


var Contact =
/*#__PURE__*/
function (_Document) {
  (0, _inherits2.default)(Contact, _Document);

  function Contact() {
    (0, _classCallCheck2.default)(this, Contact);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Contact).apply(this, arguments));
  }

  (0, _createClass2.default)(Contact, null, [{
    key: "isContact",

    /**
     * Returns true if candidate is a contact
     *
     * @param {Object} candidate
     * @return {boolean} - whether the candidate is a contact
     */
    value: function isContact(candidate) {
      return candidate._type === Contact.doctype;
    }
    /**
     * Returns the initials of the contact.
     *
     * @param {Contact|string} contact - A contact or a string
     * @return {string} - the contact's initials
     */

  }, {
    key: "getInitials",
    value: function getInitials(contact) {
      if (typeof contact === 'string') {
        log('warn', 'Passing a string to Contact.getInitials will be deprecated soon.');
        return contact[0].toUpperCase();
      }

      if (contact.name) {
        return ['givenName', 'familyName'].map(function (part) {
          return get(contact, ['name', part, 0], '');
        }).join('').toUpperCase();
      }

      var email = Contact.getPrimaryEmail(contact);

      if (email) {
        return email[0].toUpperCase();
      }

      log('warn', 'Contact has no name and no email.');
      return '';
    }
    /**
     * Returns the contact's main email
     *
     * @param {Contact} contact - A contact
     * @return {string} - The contact's main email
     */
    // TODO: sadly we have different versions of contacts' doctype to handle...
    // A migration tool on the stack side is needed here

  }, {
    key: "getPrimaryEmail",
    value: function getPrimaryEmail(contact) {
      return Array.isArray(contact.email) ? getPrimaryOrFirst('email')(contact).address : contact.email;
    }
    /**
     * Returns the contact's main cozy
     *
     * @param {Contact} contact - A contact
     * @return {string} - The contact's main cozy
     */

  }, {
    key: "getPrimaryCozy",
    value: function getPrimaryCozy(contact) {
      return Array.isArray(contact.cozy) ? getPrimaryOrFirst('cozy')(contact).url : contact.url;
    }
    /**
     * Returns the contact's main phone number
     *
     * @param {Contact} contact - A contact
     * @return {string} - The contact's main phone number
     */

  }, {
    key: "getPrimaryPhone",
    value: function getPrimaryPhone(contact) {
      return getPrimaryOrFirst('phone')(contact).number;
    }
    /**
     * Returns the contact's main address
     *
     * @param {Contact} contact - A contact
     * @return {string} - The contact's main address
     */

  }, {
    key: "getPrimaryAddress",
    value: function getPrimaryAddress(contact) {
      return getPrimaryOrFirst('address')(contact).formattedAddress;
    }
    /**
     * Returns the contact's fullname
     *
     * @param {Contact} contact - A contact
     * @return {string} - The contact's fullname
     */

  }, {
    key: "getFullname",
    value: function getFullname(contact) {
      if (contact.fullname) {
        return contact.fullname;
      } else if (contact.name) {
        return ['namePrefix', 'givenName', 'additionalName', 'familyName', 'nameSuffix'].map(function (part) {
          return contact.name[part];
        }).filter(function (part) {
          return part !== undefined;
        }).join(' ').trim();
      }

      return undefined;
    }
    /**
     * Returns a display name for the contact
     *
     * @param {Contact} contact - A contact
     * @return {string} - the contact's display name
     **/

  }, {
    key: "getDisplayName",
    value: function getDisplayName(contact) {
      return Contact.getFullname(contact) || Contact.getPrimaryEmail(contact);
    }
  }]);
  return Contact;
}(Document);

var ContactShape = PropTypes.shape({
  _id: PropTypes.string.isRequired,
  _type: PropTypes.string.isRequired,
  fullname: PropTypes.string,
  name: PropTypes.shape({
    givenName: PropTypes.string,
    familyName: PropTypes.string,
    additionalName: PropTypes.string,
    namePrefix: PropTypes.string,
    nameSuffix: PropTypes.string
  }),
  birthday: PropTypes.string,
  note: PropTypes.string,
  email: PropTypes.arrayOf(PropTypes.shape({
    address: PropTypes.string.isRequired,
    label: PropTypes.string,
    type: PropTypes.string,
    primary: PropTypes.bool
  })),
  address: PropTypes.arrayOf(PropTypes.shape({
    street: PropTypes.string,
    pobox: PropTypes.string,
    city: PropTypes.string,
    region: PropTypes.string,
    postcode: PropTypes.string,
    country: PropTypes.string,
    type: PropTypes.string,
    primary: PropTypes.bool,
    label: PropTypes.string,
    formattedAddress: PropTypes.string
  })),
  phone: PropTypes.arrayOf(PropTypes.shape({
    number: PropTypes.string.isRequired,
    type: PropTypes.string,
    label: PropTypes.string,
    primary: PropTypes.bool
  })),
  cozy: PropTypes.arrayOf(PropTypes.shape({
    url: PropTypes.string.isRequired,
    label: PropTypes.string,
    primary: PropTypes.bool
  })),
  company: PropTypes.string,
  jobTitle: PropTypes.string,
  trashed: PropTypes.bool,
  me: PropTypes.bool,
  relationships: PropTypes.shape({
    accounts: PropTypes.shape({
      data: PropTypes.arrayOf(PropTypes.shape({
        _id: PropTypes.string.isRequired,
        _type: PropTypes.string.isRequired
      }))
    }),
    groups: PropTypes.shape({
      data: PropTypes.arrayOf(PropTypes.shape({
        _id: PropTypes.string.isRequired,
        _type: PropTypes.string.isRequired
      }))
    })
  })
});
Contact.doctype = 'io.cozy.contacts';
Contact.propType = ContactShape;
module.exports = Contact;