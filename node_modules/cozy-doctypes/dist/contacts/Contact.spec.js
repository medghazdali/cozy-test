"use strict";

var Contact = require('./Contact');

describe('Contact model', function () {
  describe('isContact method', function () {
    it('should return true if candidate is a contact', function () {
      var candidate = {
        _id: '36cd8707-9ab9',
        _type: 'io.cozy.contacts',
        name: {
          givenName: 'Jaime',
          familyName: 'Lannister'
        }
      };
      var result = Contact.isContact(candidate);
      expect(result).toBe(true);
    });
    it('should return false if candidate is not a contact', function () {
      var candidate = {
        foo: 'bar'
      };
      var result = Contact.isContact(candidate);
      expect(result).toBe(false);
    });
  });
  describe('getInitials method', function () {
    it("should return the contact's initials from the name", function () {
      var contact = {
        name: {
          givenName: 'Arya',
          familyName: 'Stark'
        }
      };
      var result = Contact.getInitials(contact);
      expect(result).toEqual('AS');
    });
    it("should return the contact's initials if contact has only givenName", function () {
      var contact = {
        name: {
          givenName: 'Arya'
        }
      };
      var result = Contact.getInitials(contact);
      expect(result).toEqual('A');
    });
    it("should return the contact's initials if contact has only familyName", function () {
      var contact = {
        name: {
          familyName: 'Stark'
        }
      };
      var result = Contact.getInitials(contact);
      expect(result).toEqual('S');
    });
    it('should return the first letter of the primary email if contact has no name', function () {
      var contact = {
        name: undefined,
        email: [{
          address: 'arya.stark@thenorth.westeros',
          primary: true
        }]
      };
      var result = Contact.getInitials(contact);
      expect(result).toEqual('A');
    });
    it('should return the first letter if input is a string', function () {
      var result = Contact.getInitials('arya.stark@thenorth.westeros');
      expect(result).toEqual('A');
    });
    it('should return an empty string if contact has no name/email', function () {
      var result = Contact.getInitials({});
      expect(result).toEqual('');
    });
  });
  describe('getPrimaryEmail', function () {
    it('should return the main email', function () {
      var contact = {
        email: [{
          address: 'beth@braavos.essos',
          primary: false
        }, {
          address: 'arya.stark@thenorth.westeros',
          primary: true
        }]
      };
      var result = Contact.getPrimaryEmail(contact);
      expect(result).toEqual('arya.stark@thenorth.westeros');
    });
    it('should return the first if there is no primary', function () {
      var contact = {
        email: [{
          address: 'beth@braavos.essos'
        }, {
          address: 'arya.stark@thenorth.westeros'
        }]
      };
      var result = Contact.getPrimaryEmail(contact);
      expect(result).toEqual('beth@braavos.essos');
    });
    it('should work with old doctype', function () {
      var contact = {
        email: 'arya.stark@thenorth.westeros'
      };
      var result = Contact.getPrimaryEmail(contact);
      expect(result).toEqual('arya.stark@thenorth.westeros');
    });
  });
  describe('getPrimaryCozy', function () {
    it('should return the main cozy', function () {
      var contact = {
        cozy: [{
          url: 'https://arya.mycozy.cloud',
          primary: true
        }, {
          url: 'https://beth.mycozy.cloud',
          primary: false
        }]
      };
      var result = Contact.getPrimaryCozy(contact);
      expect(result).toEqual('https://arya.mycozy.cloud');
    });
    it('should return the first if there is no primary', function () {
      var contact = {
        cozy: [{
          url: 'https://arya.mycozy.cloud'
        }, {
          url: 'https://beth.mycozy.cloud'
        }]
      };
      var result = Contact.getPrimaryCozy(contact);
      expect(result).toEqual('https://arya.mycozy.cloud');
    });
    it('should work with old doctype', function () {
      var contact = {
        url: 'https://arya.mycozy.cloud'
      };
      var result = Contact.getPrimaryCozy(contact);
      expect(result).toEqual('https://arya.mycozy.cloud');
    });
  });
  describe('getPrimaryPhone', function () {
    it('should return the main phone number', function () {
      var contact = {
        phone: [{
          number: '0320007788',
          primary: true
        }, {
          number: '0666001122',
          primary: false
        }, {
          number: '0788996677',
          primary: false
        }]
      };
      var result = Contact.getPrimaryPhone(contact);
      expect(result).toEqual('0320007788');
    });
  });
  describe('getPrimaryAddress', function () {
    it('should return the main phone number', function () {
      var contact = {
        name: {
          givenName: 'Arya',
          familyName: 'Stark'
        },
        address: [{
          formattedAddress: 'Winterfell',
          primary: true
        }, {
          formattedAddress: 'Braavos',
          primary: false
        }, {
          formattedAddress: "The Streets of King's Landing",
          primary: false
        }]
      };
      var result = Contact.getPrimaryAddress(contact);
      expect(result).toEqual('Winterfell');
    });
  });
  describe('getFullname function', function () {
    it("should return contact's fullname", function () {
      var contact = {
        fullname: 'Doran Martell',
        name: {
          givenName: 'Do',
          familyName: 'Martell'
        }
      };
      var result = Contact.getFullname(contact);
      expect(result).toEqual('Doran Martell');
    });
    it('should combine all name parts', function () {
      var contact = {
        fullname: '',
        name: {
          namePrefix: 'The Mother of Dragons',
          givenName: 'Daenerys',
          additionalName: 'The Unburnt',
          familyName: 'Targaryen',
          nameSuffix: 'Breaker of Chains'
        }
      };
      var result = Contact.getDisplayName(contact);
      expect(result).toEqual('The Mother of Dragons Daenerys The Unburnt Targaryen Breaker of Chains');
    });
    it("should return contact's givenName + familyName if no fullname", function () {
      var contact = {
        fullname: undefined,
        name: {
          givenName: 'Doran',
          familyName: 'Martell'
        }
      };
      var result = Contact.getFullname(contact);
      expect(result).toEqual('Doran Martell');
    });
    it("should return contact's givenName if no familyName", function () {
      var contact = {
        fullname: undefined,
        name: {
          givenName: 'Doran',
          familyName: ''
        }
      };
      var result = Contact.getFullname(contact);
      expect(result).toEqual('Doran');
    });
    it("should return contact's familyName if no givenName", function () {
      var contact = {
        fullname: undefined,
        name: {
          givenName: '',
          familyName: 'Martell'
        }
      };
      var result = Contact.getFullname(contact);
      expect(result).toEqual('Martell');
    });
  });
  describe('getDisplayName function', function () {
    it("should return the contact's fullname if any", function () {
      var contact = {
        fullname: 'Doran Martell',
        name: {
          givenName: 'Doran',
          familyName: 'Martell'
        },
        email: [{
          address: 'doran.martell@dorne.westeros',
          primary: true
        }]
      };
      var result = Contact.getDisplayName(contact);
      expect(result).toEqual('Doran Martell');
    });
    it("should return the contact's name if no fullname", function () {
      var contact = {
        fullname: '',
        name: {
          givenName: 'Doran',
          familyName: 'Martell'
        },
        email: [{
          address: 'doran.martell@dorne.westeros',
          primary: true
        }]
      };
      var result = Contact.getDisplayName(contact);
      expect(result).toEqual('Doran Martell');
    });
    it("should return the contact's primary email if no fullname and no name", function () {
      var contact = {
        fullname: undefined,
        name: undefined,
        email: [{
          address: 'doran.martell@dorne.westeros',
          primary: true
        }]
      };
      var result = Contact.getDisplayName(contact);
      expect(result).toEqual('doran.martell@dorne.westeros');
    });
  });
});