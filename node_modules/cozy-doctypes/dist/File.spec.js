"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var MockDate = require('mockdate');

var _require = require('./testUtils'),
    cozyClient = _require.cozyClient;

var CozyFile = require('./File');

var destroySpy = jest.fn().mockName('destroy');
var getSpy = jest.fn().mockName('get');
var statByPathSpy = jest.fn().mockName('statByPath');
var updateFileMetadataSpy = jest.fn().mockName('updateFileMetadata');
var createFileSpy = jest.fn().mockName('createFileSpy');
var updateFileSpy = jest.fn().mockName('updateFileSpy');
var MOCKED_DATE = new Date('2018-01-01T12:00:00.210Z');
beforeAll(function () {
  MockDate.set(MOCKED_DATE);
  cozyClient.stackClient.collection.mockReturnValue({
    destroy: destroySpy,
    get: getSpy,
    statByPath: statByPathSpy,
    updateFileMetadata: updateFileMetadataSpy,
    createFile: createFileSpy,
    updateFile: updateFileSpy
  });
  CozyFile.registerClient(cozyClient);
});
afterAll(function () {
  MockDate.reset();
});
describe('File model', function () {
  describe('getFullpath', function () {
    var parentDirPath;
    beforeEach(function () {
      getSpy.mockImplementation(function () {
        return Promise.resolve({
          data: {
            path: parentDirPath
          }
        });
      });
    });
    afterEach(function () {
      jest.restoreAllMocks();
    });
    it('should return the full path of the file',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee() {
      var result;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              parentDirPath = '/GrandParent/Parent';
              _context.next = 3;
              return CozyFile.getFullpath('parent', 'mydoc.odt');

            case 3:
              result = _context.sent;
              expect(cozyClient.stackClient.collection).toHaveBeenCalledWith('io.cozy.files');
              expect(getSpy).toHaveBeenCalledWith('parent');
              expect(result).toEqual('/GrandParent/Parent/mydoc.odt');

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
    it('should return the full path of the file if it is in root directory',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee2() {
      var result;
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              parentDirPath = '/';
              _context2.next = 3;
              return CozyFile.getFullpath('parent', 'mydoc.odt');

            case 3:
              result = _context2.sent;
              expect(cozyClient.stackClient.collection).toHaveBeenCalledWith('io.cozy.files');
              expect(getSpy).toHaveBeenCalledWith('parent');
              expect(result).toEqual('/mydoc.odt');

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })));
  });
  describe('move', function () {
    var fileId = 'file-2295478c';
    var folderId = 'dir-b1e1c256';
    afterEach(function () {
      jest.restoreAllMocks();
      jest.clearAllMocks();
    });
    it('should move a file to another destination',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee3() {
      var result;
      return _regenerator.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              updateFileMetadataSpy.mockResolvedValue({
                data: {
                  id: fileId,
                  dir_id: folderId,
                  _type: 'io.cozy.files'
                }
              });
              _context3.next = 3;
              return CozyFile.move(fileId, {
                folderId: folderId
              });

            case 3:
              result = _context3.sent;
              expect(updateFileMetadataSpy).toHaveBeenCalled();
              expect(result).toEqual({
                deleted: null,
                moved: {
                  id: 'file-2295478c',
                  dir_id: 'dir-b1e1c256',
                  _type: 'io.cozy.files'
                }
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    })));
    it('should fail with an error if there is a conflict and force is false',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee4() {
      return _regenerator.default.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              updateFileMetadataSpy.mockRejectedValueOnce({
                status: 409
              });
              _context4.prev = 1;
              _context4.next = 4;
              return CozyFile.move(fileId, {
                folderId: folderId
              });

            case 4:
              _context4.next = 9;
              break;

            case 6:
              _context4.prev = 6;
              _context4.t0 = _context4["catch"](1);
              expect(_context4.t0).toEqual({
                status: 409
              });

            case 9:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, null, [[1, 6]]);
    })));
    it('should overwrite the destination if there is a conflict and force is true',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee5() {
      var DELETED_FILE_ID, result;
      return _regenerator.default.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              DELETED_FILE_ID = 'deleted-c097ffca';
              updateFileMetadataSpy.mockRejectedValueOnce({
                status: 409
              });
              updateFileMetadataSpy.mockResolvedValue({
                data: {
                  id: fileId,
                  dir_id: folderId,
                  _type: 'io.cozy.files'
                }
              });
              getSpy.mockResolvedValue({
                data: {
                  id: fileId,
                  name: 'mydoc.odt',
                  _type: 'io.cozy.files'
                }
              });
              statByPathSpy.mockResolvedValue({
                data: {
                  id: DELETED_FILE_ID,
                  _type: 'io.cozy.files'
                }
              });
              _context5.next = 7;
              return CozyFile.move(fileId, {
                folderId: folderId
              }, true);

            case 7:
              result = _context5.sent;
              expect(updateFileMetadataSpy).toHaveBeenCalled();
              expect(destroySpy).toHaveBeenCalled();
              expect(result).toEqual({
                deleted: DELETED_FILE_ID,
                moved: {
                  id: 'file-2295478c',
                  dir_id: 'dir-b1e1c256',
                  _type: 'io.cozy.files'
                }
              });

            case 11:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    })));
    it('should use destination.path if it is given',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee6() {
      var DELETED_FILE_ID, result;
      return _regenerator.default.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              DELETED_FILE_ID = 'deleted-c097ffca';
              updateFileMetadataSpy.mockRejectedValueOnce({
                status: 409
              });
              updateFileMetadataSpy.mockResolvedValue({
                data: {
                  id: fileId,
                  dir_id: folderId,
                  _type: 'io.cozy.files'
                }
              });
              statByPathSpy.mockResolvedValue({
                data: {
                  id: DELETED_FILE_ID,
                  _type: 'io.cozy.files'
                }
              });
              _context6.next = 6;
              return CozyFile.move(fileId, {
                folderId: folderId,
                path: '/mydir/mydoc.odt'
              }, true);

            case 6:
              result = _context6.sent;
              expect(getSpy).not.toHaveBeenCalled();
              expect(updateFileMetadataSpy).toHaveBeenCalled();
              expect(destroySpy).toHaveBeenCalled();
              expect(result).toEqual({
                deleted: DELETED_FILE_ID,
                moved: {
                  id: 'file-2295478c',
                  dir_id: 'dir-b1e1c256',
                  _type: 'io.cozy.files'
                }
              });

            case 11:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    })));
  });
  describe('splitFilename', function () {
    var name = function name(_ref7) {
      var filename = _ref7.filename,
          extension = _ref7.extension;
      return filename + extension;
    };

    var file = function file(expectation) {
      return {
        type: 'file',
        name: name(expectation)
      };
    };

    var stringify = JSON.stringify;
    var scenarios = [{
      filename: 'file',
      extension: '.ext'
    }, {
      filename: 'file',
      extension: ''
    }, {
      filename: 'file.html',
      extension: '.ejs'
    }, {
      filename: 'file',
      extension: '.'
    }, {
      filename: 'file.',
      extension: '.'
    }, {
      filename: 'file.',
      extension: '.ext'
    }, {
      filename: '.file',
      extension: ''
    }, {
      filename: '.file',
      extension: '.ext'
    }];

    var _loop = function _loop() {
      var expectation = _scenarios[_i];
      it("splits ".concat(stringify(name(expectation)), " into ").concat(stringify(expectation)), function () {
        expect(CozyFile.splitFilename(file(expectation))).toEqual(expectation);
      });
    };

    for (var _i = 0, _scenarios = scenarios; _i < _scenarios.length; _i++) {
      _loop();
    }

    it('should throw an error if the file is not correct', function () {
      var file = {};
      expect(function () {
        return CozyFile.splitFilename(file);
      }).toThrow();
    });
    it('should return only the folder name if its a folder', function () {
      var file = {
        name: 'foo',
        type: 'directory'
      };
      var result = CozyFile.splitFilename(file);
      expect(result).toEqual({
        filename: 'foo',
        extension: ''
      });
    });
  });
  describe('generateNewFileNameOnConflict', function () {
    it('should generate the right file name with _X', function () {
      var filename1 = CozyFile.generateNewFileNameOnConflict('test');
      expect(filename1).toEqual('test_1');
      var filename2 = CozyFile.generateNewFileNameOnConflict('test_1');
      expect(filename2).toEqual('test_2');
      var filename3 = CozyFile.generateNewFileNameOnConflict('test_1_1_test');
      expect(filename3).toEqual('test_1_1_test_1');
      var filename4 = CozyFile.generateNewFileNameOnConflict('test_');
      expect(filename4).toEqual('test__1');
    });
  });
  describe('generateFileNameForRevision', function () {
    it('should generate the right file name for a revision', function () {
      var MOCKED_DATE = '2018-01-01T12:00:00.210Z';
      var expectedFilename = 'test_01 January - 12h00.pdf';
      var date = new Date(MOCKED_DATE);
      var result = CozyFile.generateFileNameForRevision({
        name: 'test.pdf'
      }, {
        updated_at: date
      }, function () {
        return '01 January - 12h00';
      });
      expect(result).toEqual(expectedFilename);
    });
  });
  describe('uploadFileWithConflictStrategy', function () {
    beforeEach(function () {
      getSpy.mockImplementation(function () {
        return Promise.resolve({
          data: {
            path: '/GrandParent/Parent'
          }
        });
      });
    });
    afterEach(function () {
      jest.restoreAllMocks();
      jest.clearAllMocks();
    });
    it('should use metadata',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee7() {
      var dirId, metadata;
      return _regenerator.default.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              statByPathSpy.mockRejectedValueOnce(new Error('Not Found'));
              dirId = 'toto';
              metadata = {
                classification: '_1',
                subject: {
                  a: 'b'
                }
              };
              _context7.next = 5;
              return CozyFile.uploadFileWithConflictStrategy('filename', '', dirId, 'rename', metadata);

            case 5:
              expect(createFileSpy).toHaveBeenCalledWith('', {
                contentType: 'image/jpeg',
                dirId: dirId,
                name: 'filename',
                metadata: metadata,
                lastModifiedDate: MOCKED_DATE
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    })));
    it('should use provided ContentType',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee8() {
      var dirId, metadata;
      return _regenerator.default.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              statByPathSpy.mockRejectedValueOnce(new Error('Not Found'));
              dirId = 'toto';
              metadata = {
                classification: '_1',
                subject: {
                  a: 'b'
                }
              };
              _context8.next = 5;
              return CozyFile.uploadFileWithConflictStrategy('filename', '', dirId, 'rename', metadata, 'application/pdf');

            case 5:
              expect(createFileSpy).toHaveBeenCalledWith('', {
                contentType: 'application/pdf',
                dirId: dirId,
                name: 'filename',
                metadata: metadata,
                lastModifiedDate: MOCKED_DATE
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    })));
    it('should call the upload method if no conflict',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee9() {
      return _regenerator.default.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              statByPathSpy.mockRejectedValueOnce(new Error('Not Found'));
              createFileSpy.mockResolvedValue({
                data: {
                  id: 'jj',
                  dir_id: 'jj',
                  _type: 'io.cozy.files'
                }
              });
              _context9.prev = 2;
              _context9.next = 5;
              return CozyFile.uploadFileWithConflictStrategy('test', {}, 'a', 'erase');

            case 5:
              _context9.next = 10;
              break;

            case 7:
              _context9.prev = 7;
              _context9.t0 = _context9["catch"](2);
              expect(createFileSpy).toHaveBeenCalled();

            case 10:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, null, [[2, 7]]);
    })));
    it('should rename the file if there is a conflict',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee10() {
      var dirId;
      return _regenerator.default.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              dirId = 'toto'; //first call we return an existing file => conflict
              //second call, we reject as not found

              statByPathSpy.mockReturnValueOnce({
                data: {
                  id: 'file_id'
                }
              }).mockRejectedValueOnce(new Error('Not Found'));
              _context10.next = 4;
              return CozyFile.uploadFileWithConflictStrategy('filename', '', dirId, 'rename', {});

            case 4:
              expect(createFileSpy).toHaveBeenCalledWith('', {
                contentType: 'image/jpeg',
                dirId: dirId,
                name: 'filename_1',
                metadata: {},
                lastModifiedDate: MOCKED_DATE
              });

            case 5:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    })));
    it('should erase the file if there is a conflict',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee11() {
      var dirId;
      return _regenerator.default.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              dirId = 'toto'; //first call we return an existing file => conflict
              //second call, we reject as not found

              statByPathSpy.mockReturnValueOnce({
                data: {
                  id: 'file_id'
                }
              });
              _context11.next = 4;
              return CozyFile.uploadFileWithConflictStrategy('filename', '', dirId, 'erase');

            case 4:
              expect(updateFileSpy).toHaveBeenCalledWith('', {
                fileId: 'file_id',
                dirId: dirId,
                name: 'filename'
              });

            case 5:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    })));
  });
});