"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var get = require('lodash/get');

var flatten = require('lodash/flatten');

var Contact = require('../contacts/Contact');

var Document = require('../Document');

var AdministrativeProcedure =
/*#__PURE__*/
function (_Document) {
  (0, _inherits2.default)(AdministrativeProcedure, _Document);

  function AdministrativeProcedure() {
    (0, _classCallCheck2.default)(this, AdministrativeProcedure);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AdministrativeProcedure).apply(this, arguments));
  }

  (0, _createClass2.default)(AdministrativeProcedure, null, [{
    key: "getPersonalData",

    /**
     * Returns personal data for the contact
     *
     * @param {Contact} contact - A contact
     * @param {Array} fields - The list of fields to retrieve
     * @return {Object} - the personal data
     **/
    value: function getPersonalData(contact, fields) {
      var mapping = {
        firstname: {
          path: 'name.givenName'
        },
        lastname: {
          path: 'name.familyName'
        },
        address: {
          getter: Contact.getPrimaryAddress
        },
        email: {
          getter: Contact.getPrimaryEmail
        },
        phone: {
          getter: Contact.getPrimaryPhone
        }
      };
      var personalData = {};
      fields.forEach(function (field) {
        var contactField = get(mapping, field, field);
        var value;

        if (contactField.getter) {
          value = contactField.getter(contact);
        } else {
          var path = get(contactField, 'path', field);
          value = get(contact, path);
        }

        if (value !== undefined) {
          personalData[field] = value;
        }
      });
      return personalData;
    }
    /**
     * Method to generate a query based on a few rules given by the template
     * @param {Object} docRules
     * @param {Object} docRules.rules
     * @param {int} docRules.count
     */

  }, {
    key: "getFilesByRules",
    value: function () {
      var _getFilesByRules = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(docRules) {
        var rules, count, cozyRules, files;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                rules = docRules.rules, count = docRules.count;
                cozyRules = (0, _objectSpread2.default)({
                  trashed: false,
                  type: 'file'
                }, rules); //Create an index in order to query and sort

                _context.next = 4;
                return this.cozyClient.collection('io.cozy.files').createIndex(['metadata.datetime', 'metadata.classification']);

              case 4:
                _context.next = 6;
                return this.cozyClient.collection('io.cozy.files').find(cozyRules, {
                  indexedFields: ['metadata.datetime', 'metadata.classification'],
                  sort: [{
                    'metadata.datetime': 'desc'
                  }, {
                    'metadata.classification': 'desc'
                  }],
                  limit: count ? count : 1
                });

              case 6:
                files = _context.sent;
                return _context.abrupt("return", files);

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getFilesByRules(_x) {
        return _getFilesByRules.apply(this, arguments);
      }

      return getFilesByRules;
    }()
    /**
     * Returns a io.cozy.procedures.administratives object
     *
     * @param {object} data - The data we need for this type of procedure
     * @param {ProcedureTemplate} template - The procedure's template
     * @return {AdministrativeProcedure} the administrative procedure
     */

  }, {
    key: "create",
    value: function create(data, template) {
      var documentsData = data.documentsData,
          personalData = data.personalData,
          procedureData = data.procedureData;
      var files = Object.keys(documentsData).map(function (identifier) {
        return documentsData[identifier].files.map(function (file) {
          //TODO Remove this check. it has to be done before
          if (file) return {
            _id: file.id,
            _type: 'io.cozy.files',
            templateDocumentId: identifier
          };
        });
      });
      return {
        personalData: personalData,
        procedureData: procedureData,
        submissionDate: new Date(),
        templateId: template.type,
        templateVersion: template.version,
        relationships: {
          files: {
            data: flatten(files)
          }
        }
      };
    }
    /**
     * Returns json that represents the administative procedure
     *
     * @param {AdministrativeProcedure}
     * @return {string} - the json that represents this procedure
     *
     */

  }, {
    key: "createJson",
    value: function createJson(administrativeProcedure) {
      return JSON.stringify(administrativeProcedure);
    }
  }]);
  return AdministrativeProcedure;
}(Document);

AdministrativeProcedure.doctype = 'io.cozy.procedures.administratives';
module.exports = AdministrativeProcedure;