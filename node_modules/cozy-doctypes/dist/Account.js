"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread3 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var Document = require('./Document');

var pickBy = require('lodash/pickBy');

var get = require('lodash/get');

var ACCOUNTS_DOCTYPE = 'io.cozy.accounts'; // Order matters

var probableLoginFieldNames = ['login', 'identifier', 'new_identifier', 'email'];

var Account =
/*#__PURE__*/
function (_Document) {
  (0, _inherits2.default)(Account, _Document);

  function Account() {
    (0, _classCallCheck2.default)(this, Account);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Account).apply(this, arguments));
  }

  (0, _createClass2.default)(Account, null, [{
    key: "getAccountName",
    value: function getAccountName(account) {
      if (!account) return null;

      if (account.auth) {
        return account.auth.accountName || this.getAccountLogin(account) || account._id;
      } else {
        return account._id;
      }
    }
  }, {
    key: "getAccountLogin",
    value: function getAccountLogin(account) {
      if (account && account.auth) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = probableLoginFieldNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var fieldName = _step.value;
            if (account.auth[fieldName]) return account.auth[fieldName];
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }
    /**
     * Create an account document from a vault cipher
     *
     * @param {Object} cipher
     * @param {Object} [options={}]
     * @param {string} [options.identifierProperty=login] - The name of the identifier property to use for this account
     *
     * @returns {Object}
     */

  }, {
    key: "fromCipher",
    value: function fromCipher(cipher) {
      var _objectSpread2;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var opts = (0, _objectSpread3.default)({
        identifierProperty: 'login'
      }, options);
      var customFields = (get(cipher, 'fields') || []).reduce(function (fields, field) {
        fields[field.name] = field.value;
        return fields;
      }, {});
      var account = {
        auth: pickBy((0, _objectSpread3.default)((_objectSpread2 = {}, (0, _defineProperty2.default)(_objectSpread2, opts.identifierProperty, get(cipher, 'login.username', '')), (0, _defineProperty2.default)(_objectSpread2, "password", get(cipher, 'login.password', '')), _objectSpread2), customFields), function (value) {
          return Boolean(value);
        })
      };

      if (cipher) {
        account.relationships = {
          vaultCipher: {
            _id: cipher.id,
            _type: 'com.bitwarden.ciphers',
            _protocol: 'bitwarden'
          }
        };
      }

      return account;
    }
  }]);
  return Account;
}(Document);

Account.schema = {
  doctype: ACCOUNTS_DOCTYPE,
  attributes: {},
  relationships: {
    master: {
      type: 'has-one',
      doctype: ACCOUNTS_DOCTYPE
    }
  }
};
Account.probableLoginFieldNames = probableLoginFieldNames;
module.exports = Account;