"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var PromisePool = require('es6-promise-pool');
/**
 * Like a map, executed in parallel via a promise pool
 *
 * @param  {Array}    arr          Items to process
 * @param  {Function} fn           Promise creator (will be passed each item)
 * @param  {Number}   concurrency  How many promise can be in flight at the same time
 * @return {Promise}               Resolved with the results of the promise, not necessary in order
 */


var parallelMap = function parallelMap(iterable, fn, concurrency) {
  concurrency = concurrency || 30;
  var res = [];
  var pool = new PromisePool(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee() {
    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, item;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 3;
            _iterator = iterable[Symbol.iterator]();

          case 5:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context.next = 12;
              break;
            }

            item = _step.value;
            _context.next = 9;
            return fn(item).then(function (x) {
              return res.push(x);
            });

          case 9:
            _iteratorNormalCompletion = true;
            _context.next = 5;
            break;

          case 12:
            _context.next = 18;
            break;

          case 14:
            _context.prev = 14;
            _context.t0 = _context["catch"](3);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 18:
            _context.prev = 18;
            _context.prev = 19;

            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }

          case 21:
            _context.prev = 21;

            if (!_didIteratorError) {
              _context.next = 24;
              break;
            }

            throw _iteratorError;

          case 24:
            return _context.finish(21);

          case 25:
            return _context.finish(18);

          case 26:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[3, 14, 18, 26], [19,, 21, 25]]);
  }), concurrency);
  return pool.start().then(function () {
    return res;
  });
};

module.exports = {
  parallelMap: parallelMap
};