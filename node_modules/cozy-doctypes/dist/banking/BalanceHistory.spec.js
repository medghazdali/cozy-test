"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var BalanceHistory = require('./BalanceHistory');

var Document = require('../Document');

var _require = require('../testUtils'),
    cozyClientJS = _require.cozyClientJS;

describe('Balance history', function () {
  var queryResult = [];
  beforeAll(function () {
    Document.registerClient(cozyClientJS);
    cozyClientJS.data.query.mockImplementation(function () {
      return Promise.resolve(queryResult);
    });
  });
  var doc = {
    year: 2018,
    relationships: {
      account: {
        data: {
          _id: 3
        }
      }
    }
  };
  it('should update or create on year + account linked',
  /*#__PURE__*/
  (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee() {
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return BalanceHistory.createOrUpdate(doc);

          case 2:
            expect(cozyClientJS.data.query).toHaveBeenCalledWith(expect.anything(), {
              selector: {
                year: 2018,
                'relationships.account.data._id': 3
              }
            });
            expect(cozyClientJS.data.create).toHaveBeenCalledTimes(1);
            queryResult = [{
              year: 2018,
              relationships: {
                account: {
                  data: {
                    _id: 3
                  }
                }
              }
            }];
            _context.next = 7;
            return BalanceHistory.createOrUpdate(doc);

          case 7:
            expect(cozyClientJS.data.create).toHaveBeenCalledTimes(1);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
});