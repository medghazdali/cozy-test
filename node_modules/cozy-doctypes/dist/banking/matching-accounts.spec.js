"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var fs = require('fs-extra');

var path = require('path');

var _require = require('./matching-accounts'),
    matchAccounts = _require.matchAccounts,
    normalizeAccountNumber = _require.normalizeAccountNumber,
    score = _require.score;

var BANK_ACCOUNT_DOCTYPE = 'io.cozy.bank.accounts';

var readBankAccounts = function readBankAccounts(filename) {
  return fs.readJSONSync(filename)[BANK_ACCOUNT_DOCTYPE];
};

var matchFiles = function matchFiles(biFilename, linxoFilename) {
  return matchAccounts(readBankAccounts(biFilename), readBankAccounts(linxoFilename));
};

var fixturePath = path.join(__dirname, 'fixtures'); // For these tests to run, you need to decrypt encrypted.tar.gz.gpg
// `yarn run decrypt-banking-tests` in the workspace root

var fnDescribe = fs.existsSync(fixturePath) ? describe : xdescribe;
fnDescribe('account matching', function () {
  var banks = ['axa', 'banquepopulaire', 'banquepopulaire2', 'ing', 'boursorama', 'caissedepargne', 'creditagricoleaquitaine', 'fortuneo', 'hellobank', 'bnp', 'hsbc', 'hsbc2', 'creditmutuel', 'banquepostale', 'milleis', 'banquepostale2', 'fortuneo2'];

  var _loop = function _loop() {
    var bank = _banks[_i];
    it("should correctly match ".concat(bank), function () {
      var results = matchFiles(path.join(fixturePath, "".concat(bank, ".bi.anonymized.json")), path.join(fixturePath, "".concat(bank, ".linxo.anonymized.json")));
      var fmtedResults = results.map(function (res) {
        return res.match ? "\u2705 ".concat(res.account.label, " -> ").concat(res.match.label, " via ").concat(res.method) : "\u26A0\uFE0F ".concat(res.account.label, " unmatched");
      });
      expect(fmtedResults).toMatchSnapshot();
    });
  };

  for (var _i = 0, _banks = banks; _i < _banks.length; _i++) {
    _loop();
  }
});
describe('slug match', function () {
  var account = {
    balance: 1337,
    label: 'Test account',
    number: '19019019002',
    type: 'CreditCard',
    institutionLabel: 'Boursorama'
  };
  it('should not match an account with a different slug', function () {
    expect(score(account, (0, _objectSpread2.default)({}, account, {
      institutionLabel: 'Bred'
    })).points).toBeLessThan(0);
  });
  it('should match if we cannot determine the slug', function () {
    expect(score(account, (0, _objectSpread2.default)({}, account, {
      // Since we cannot determine the slug, it is not
      // counted as a mismatch
      // (does not match with ING since there is a ^ in the regexp)
      institutionLabel: 'Unexisting bank'
    })).points).toBeGreaterThan(0);
  });
});
it('should normalize account number', function () {
  expect(normalizeAccountNumber('LEO-385248377-EUR')).toBe('385248377');
  expect(normalizeAccountNumber('385248377EUR')).toBe('385248377');
  expect(normalizeAccountNumber('')).toBe('');
  expect(normalizeAccountNumber(null)).toBe(null);
  expect(normalizeAccountNumber(undefined)).toBe(undefined);
});