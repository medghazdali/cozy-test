"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var Document = require('../Document');

var BankAccount = require('./BankAccount');

var BalanceHistory =
/*#__PURE__*/
function (_Document) {
  (0, _inherits2.default)(BalanceHistory, _Document);

  function BalanceHistory() {
    (0, _classCallCheck2.default)(this, BalanceHistory);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(BalanceHistory).apply(this, arguments));
  }

  (0, _createClass2.default)(BalanceHistory, null, [{
    key: "getByYearAndAccount",
    value: function () {
      var _getByYearAndAccount = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(year, accountId) {
        var index, options, _ref, _ref2, balance;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return Document.getIndex(this.doctype, this.idAttributes);

              case 2:
                index = _context.sent;
                options = {
                  selector: {
                    year: year,
                    'relationships.account.data._id': accountId
                  },
                  limit: 1
                };
                _context.next = 6;
                return Document.query(index, options);

              case 6:
                _ref = _context.sent;
                _ref2 = (0, _slicedToArray2.default)(_ref, 1);
                balance = _ref2[0];

                if (!balance) {
                  _context.next = 11;
                  break;
                }

                return _context.abrupt("return", balance);

              case 11:
                return _context.abrupt("return", this.getEmptyDocument(year, accountId));

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getByYearAndAccount(_x, _x2) {
        return _getByYearAndAccount.apply(this, arguments);
      }

      return getByYearAndAccount;
    }()
  }, {
    key: "getEmptyDocument",
    value: function getEmptyDocument(year, accountId) {
      return {
        year: year,
        balances: {},
        metadata: {
          version: this.version
        },
        relationships: {
          account: {
            data: {
              _id: accountId,
              _type: BankAccount.doctype
            }
          }
        }
      };
    }
  }]);
  return BalanceHistory;
}(Document);

BalanceHistory.doctype = 'io.cozy.bank.balancehistories';
BalanceHistory.idAttributes = ['year', 'relationships.account.data._id'];
BalanceHistory.version = 1;
BalanceHistory.checkedAttributes = ['balances'];
module.exports = BalanceHistory;