"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var groupBy = require('lodash/groupBy');

var get = require('lodash/get');

var Document = require('../Document');

var matching = require('./matching-accounts');

var _require = require('./slug-account'),
    getSlugFromInstitutionLabel = _require.getSlugFromInstitutionLabel;

var BankAccount =
/*#__PURE__*/
function (_Document) {
  (0, _inherits2.default)(BankAccount, _Document);

  function BankAccount() {
    (0, _classCallCheck2.default)(this, BankAccount);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(BankAccount).apply(this, arguments));
  }

  (0, _createClass2.default)(BankAccount, null, [{
    key: "reconciliate",

    /**
     * Adds _id of existing accounts to fetched accounts
     */
    value: function reconciliate(fetchedAccounts, localAccounts) {
      var matchings = matching.matchAccounts(fetchedAccounts, localAccounts);
      return matchings.map(function (matching) {
        return (0, _objectSpread2.default)({}, matching.account, {
          _id: matching.match ? matching.match._id : undefined
        });
      });
    }
  }, {
    key: "findDuplicateAccountsWithNoOperations",
    value: function findDuplicateAccountsWithNoOperations(accounts, operations) {
      var opsByAccountId = groupBy(operations, function (op) {
        return op.account;
      });
      var duplicateAccountGroups = Object.entries(groupBy(accounts, function (x) {
        return x.institutionLabel + ' > ' + x.label;
      })).map(function (_ref) {
        var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
            duplicateGroup = _ref2[1];

        return duplicateGroup;
      }).filter(function (duplicateGroup) {
        return duplicateGroup.length > 1;
      });
      var res = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = duplicateAccountGroups[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var duplicateAccounts = _step.value;
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = duplicateAccounts[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var account = _step2.value;
              var accountOperations = opsByAccountId[account._id] || [];

              if (accountOperations.length === 0) {
                res.push(account);
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return res;
    }
  }, {
    key: "hasIncoherentCreatedByApp",
    value: function hasIncoherentCreatedByApp(account) {
      var predictedSlug = getSlugFromInstitutionLabel(account.institutionLabel);
      var createdByApp = account.cozyMetadata && account.cozyMetadata.createdByApp;
      return Boolean(predictedSlug && createdByApp && predictedSlug !== createdByApp);
    }
  }, {
    key: "getUpdatedAt",
    value: function getUpdatedAt(account) {
      var vendorUpdatedAt = get(account, 'metadata.updatedAt');

      if (vendorUpdatedAt) {
        return vendorUpdatedAt;
      }

      var cozyUpdatedAt = get(account, 'cozyMetadata.updatedAt');

      if (cozyUpdatedAt) {
        return cozyUpdatedAt;
      }

      return null;
    }
  }]);
  return BankAccount;
}(Document);

BankAccount.normalizeAccountNumber = matching.normalizeAccountNumber;
BankAccount.doctype = 'io.cozy.bank.accounts';
BankAccount.idAttributes = ['_id'];
BankAccount.version = 1;
BankAccount.checkedAttributes = null;
BankAccount.vendorIdAttr = 'vendorId';
module.exports = BankAccount;