"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var fromPairs = require('lodash/fromPairs');

var log = require('cozy-logger').namespace('BankingReconciliator');

var BankingReconciliator =
/*#__PURE__*/
function () {
  function BankingReconciliator(options) {
    (0, _classCallCheck2.default)(this, BankingReconciliator);
    this.options = options;
  }

  (0, _createClass2.default)(BankingReconciliator, [{
    key: "saveAccounts",
    value: function () {
      var _saveAccounts = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(fetchedAccounts, options) {
        var BankAccount, stackAccounts, reconciliatedAccounts, savedAccounts;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                BankAccount = this.options.BankAccount;
                _context.next = 3;
                return BankAccount.fetchAll();

              case 3:
                stackAccounts = _context.sent;
                // Reconciliate
                reconciliatedAccounts = BankAccount.reconciliate(fetchedAccounts, stackAccounts);
                log('info', 'Saving accounts...');
                _context.next = 8;
                return BankAccount.bulkSave(reconciliatedAccounts, {
                  handleDuplicates: 'remove'
                });

              case 8:
                savedAccounts = _context.sent;

                if (options.onAccountsSaved) {
                  options.onAccountsSaved(savedAccounts);
                }

                return _context.abrupt("return", {
                  savedAccounts: savedAccounts,
                  reconciliatedAccounts: reconciliatedAccounts
                });

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function saveAccounts(_x, _x2) {
        return _saveAccounts.apply(this, arguments);
      }

      return saveAccounts;
    }()
  }, {
    key: "save",
    value: function () {
      var _save = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee2(fetchedAccounts, fetchedTransactions) {
        var options,
            _this$options,
            BankAccount,
            BankTransaction,
            _ref,
            reconciliatedAccounts,
            savedAccounts,
            vendorIdToCozyId,
            reconciliatedAccountIds,
            stackTransactions,
            transactions,
            i,
            logProgress,
            savedTransactions,
            _args2 = arguments;

        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};
                _this$options = this.options, BankAccount = _this$options.BankAccount, BankTransaction = _this$options.BankTransaction;
                _context2.next = 4;
                return this.saveAccounts(fetchedAccounts, options);

              case 4:
                _ref = _context2.sent;
                reconciliatedAccounts = _ref.reconciliatedAccounts;
                savedAccounts = _ref.savedAccounts;
                vendorIdToCozyId = fromPairs(savedAccounts.map(function (acc) {
                  return [acc[BankAccount.vendorIdAttr], acc._id];
                }));
                log('info', 'Linking transactions to accounts...');
                log('info', JSON.stringify(vendorIdToCozyId));
                fetchedTransactions.forEach(function (tr) {
                  tr.account = vendorIdToCozyId[tr[BankTransaction.vendorAccountIdAttr]];

                  if (tr.account === undefined) {
                    log('warn', "Transaction without account, vendorAccountIdAttr: ".concat(BankTransaction.vendorAccountIdAttr));
                    log('warn', 'transaction: ' + JSON.stringify(tr));
                    throw new Error('Transaction without account.');
                  }
                });
                reconciliatedAccountIds = new Set(reconciliatedAccounts.filter(function (acc) {
                  return acc._id;
                }).map(function (acc) {
                  return acc._id;
                })); // Pass to transaction reconciliation only transactions that belong
                // to one of the reconciliated accounts

                _context2.next = 14;
                return BankTransaction.fetchAll();

              case 14:
                _context2.t0 = function (transaction) {
                  return reconciliatedAccountIds.has(transaction.account);
                };

                stackTransactions = _context2.sent.filter(_context2.t0);
                transactions = BankTransaction.reconciliate(fetchedTransactions, stackTransactions, options);
                log('info', 'Saving transactions...');
                i = 1;

                logProgress = function logProgress(doc) {
                  log('debug', "[bulkSave] ".concat(i++, " Saving ").concat(doc.date, " ").concat(doc.label));
                };

                _context2.next = 22;
                return BankTransaction.bulkSave(transactions, {
                  concurrency: 30,
                  logProgress: logProgress,
                  handleDuplicates: 'remove'
                });

              case 22:
                savedTransactions = _context2.sent;
                return _context2.abrupt("return", {
                  accounts: savedAccounts,
                  transactions: savedTransactions
                });

              case 24:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function save(_x3, _x4) {
        return _save.apply(this, arguments);
      }

      return save;
    }()
  }]);
  return BankingReconciliator;
}();

module.exports = BankingReconciliator;