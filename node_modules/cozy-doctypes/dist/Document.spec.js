"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var MockDate = require('mockdate');

var Document = require('./Document');

var _require = require('./testUtils'),
    cozyClientJS = _require.cozyClientJS,
    cozyClient = _require.cozyClient;

var logger = require('cozy-logger');

var Simpson =
/*#__PURE__*/
function (_Document) {
  (0, _inherits2.default)(Simpson, _Document);

  function Simpson() {
    (0, _classCallCheck2.default)(this, Simpson);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Simpson).apply(this, arguments));
  }

  return Simpson;
}(Document);

Simpson.doctype = 'io.cozy.simpsons';
Simpson.idAttributes = ['name'];
var MOCKED_DATE = '2019-05-14T12:00:00.210Z';
beforeEach(function () {
  logger.mockReset();
});
beforeAll(function () {
  MockDate.set(MOCKED_DATE);
});
afterAll(function () {
  jest.restoreAllMocks();
  MockDate.reset();
});
describe('Document', function () {
  var queryResult = [];
  beforeAll(function () {
    cozyClientJS.data.query.mockImplementation(function () {
      return Promise.resolve(queryResult);
    });
  });
  beforeEach(function () {
    Document.registerClient(cozyClientJS);
  });
  afterEach(function () {
    jest.restoreAllMocks();
    Document.cozyClient = null;
  });
  describe('registerClient', function () {
    it('client cannot be registered twice', function () {
      expect(function () {
        var newClient = {};
        Document.registerClient(newClient);
      }).toThrow('Document cannot be re-registered to a client.');
    });
  });
  describe('usesCozyClient', function () {
    it('should return false', function () {
      expect(Document.usesCozyClient()).toBe(false);
    });
  });
  it('should do create or update',
  /*#__PURE__*/
  (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee() {
    var marge;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            marge = {
              name: 'Marge'
            };
            _context.next = 3;
            return Simpson.createOrUpdate(marge);

          case 3:
            expect(cozyClientJS.data.query).toHaveBeenCalledWith(expect.anything(), {
              selector: {
                name: 'Marge'
              }
            });
            expect(cozyClientJS.data.create).toHaveBeenCalledTimes(1);
            expect(cozyClientJS.data.updateAttributes).toHaveBeenCalledTimes(0);
            queryResult = [(0, _objectSpread2.default)({
              _id: 5
            }, marge)];
            _context.next = 9;
            return Simpson.createOrUpdate(marge);

          case 9:
            expect(cozyClientJS.data.create).toHaveBeenCalledTimes(1);
            expect(cozyClientJS.data.updateAttributes).toHaveBeenCalledTimes(1);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('should update updatedAt cozyMetadata on create or update',
  /*#__PURE__*/
  (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee2() {
    var marge, margeWithCozyMetas;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            marge = {
              name: 'Marge'
            };
            margeWithCozyMetas = Simpson.addCozyMetadata(marge);
            expect(margeWithCozyMetas.cozyMetadata).toBeDefined();
            expect(margeWithCozyMetas.cozyMetadata.updatedAt).toEqual(expect.any(Date));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
  it('should add createdByApp cozyMetadata on create or update if needed and possible',
  /*#__PURE__*/
  (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee3() {
    var marge, margeWithCozyMetas, MetadataSimpson, bart, bartWithCozyMetas;
    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            marge = {
              name: 'Marge'
            };
            margeWithCozyMetas = Simpson.addCozyMetadata(marge);
            expect(margeWithCozyMetas.cozyMetadata).toBeDefined();
            expect(margeWithCozyMetas.cozyMetadata.createdByApp).not.toBeDefined();

            MetadataSimpson =
            /*#__PURE__*/
            function (_Simpson) {
              (0, _inherits2.default)(MetadataSimpson, _Simpson);

              function MetadataSimpson() {
                (0, _classCallCheck2.default)(this, MetadataSimpson);
                return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MetadataSimpson).apply(this, arguments));
              }

              return MetadataSimpson;
            }(Simpson);

            MetadataSimpson.createdByApp = 'simpsoncreator';
            bart = {
              name: 'Bart'
            };
            bartWithCozyMetas = MetadataSimpson.addCozyMetadata(bart);
            expect(bartWithCozyMetas.cozyMetadata).toBeDefined();
            expect(bartWithCozyMetas.cozyMetadata.createdByApp).toEqual('simpsoncreator');

          case 10:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
  describe('updated by apps', function () {
    var marge = {
      name: 'Marge'
    };
    var bart = {
      name: 'Bart'
    };

    var MetadataSimpson =
    /*#__PURE__*/
    function (_Simpson2) {
      (0, _inherits2.default)(MetadataSimpson, _Simpson2);

      function MetadataSimpson() {
        (0, _classCallCheck2.default)(this, MetadataSimpson);
        return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MetadataSimpson).apply(this, arguments));
      }

      return MetadataSimpson;
    }(Simpson);

    MetadataSimpson.createdByApp = 'simpsoncreator';
    it('should not add updatedByApps if createdByApp not defined', function () {
      var margeWithCozyMetas = Simpson.addCozyMetadata(marge);
      expect(margeWithCozyMetas.cozyMetadata).toBeDefined();
      expect(margeWithCozyMetas.cozyMetadata.createdByApp).not.toBeDefined();
      expect(margeWithCozyMetas.cozyMetadata.updatedByApps).not.toBeDefined();
    });
    it('should add updatedByApps cozyMetadata on create or update',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee4() {
      var bartWithCozyMetas, updateInfo;
      return _regenerator.default.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              bartWithCozyMetas = MetadataSimpson.addCozyMetadata(bart);
              expect(bartWithCozyMetas.cozyMetadata).toBeDefined();
              expect(bartWithCozyMetas.cozyMetadata.updatedByApps).toBeDefined();
              updateInfo = bartWithCozyMetas.cozyMetadata.updatedByApps.find(function (x) {
                return x.slug === 'simpsoncreator';
              });
              expect(updateInfo).toMatchObject({
                date: expect.any(Date)
              });

            case 5:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    })));
    it('should not add updatedByApps twice', function () {
      var bartWithCozyMetas2 = MetadataSimpson.addCozyMetadata(MetadataSimpson.addCozyMetadata(bart));
      expect(bartWithCozyMetas2.cozyMetadata.updatedByApps.filter(function (x) {
        return x.slug === 'simpsoncreator';
      }).length).toBe(1);
    });
  });
  it('should do bulk fetch',
  /*#__PURE__*/
  (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee5() {
    return _regenerator.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return Simpson.fetchAll();

          case 2:
            expect(cozyClientJS.fetchJSON).toHaveBeenCalledWith('GET', '/data/io.cozy.simpsons/_all_docs?include_docs=true');

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  })));
  describe('duplicates', function () {
    it('should find duplicates', function () {
      var data = [{
        a: 1,
        b: 1,
        c: 4
      }, {
        a: 1,
        b: 1,
        c: 5
      }, {
        a: 3,
        b: 4,
        c: 5
      }, {
        a: 3,
        b: 5,
        c: 5
      }, {
        a: 3,
        b: 5,
        c: 7
      }];

      var AB =
      /*#__PURE__*/
      function (_Document2) {
        (0, _inherits2.default)(AB, _Document2);

        function AB() {
          (0, _classCallCheck2.default)(this, AB);
          return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AB).apply(this, arguments));
        }

        return AB;
      }(Document);

      AB.idAttributes = ['a', 'b'];
      var dups = AB.findDuplicates(data);
      expect(dups).toEqual([{
        a: 1,
        b: 1,
        c: 5
      }, {
        a: 3,
        b: 5,
        c: 7
      }]);
    });
    it('should find duplicates with complex id attributes', function () {
      var data = [{
        a: 1,
        b: {
          c: 1
        },
        d: 4
      }, {
        a: 1,
        b: {
          c: 1
        },
        d: 5
      }, {
        a: 3,
        b: {
          c: 4
        },
        d: 5
      }, {
        a: 3,
        b: {
          c: 5
        },
        d: 5
      }, {
        a: 3,
        b: {
          c: 5
        },
        d: 7
      }];

      var AB =
      /*#__PURE__*/
      function (_Document3) {
        (0, _inherits2.default)(AB, _Document3);

        function AB() {
          (0, _classCallCheck2.default)(this, AB);
          return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AB).apply(this, arguments));
        }

        return AB;
      }(Document);

      AB.idAttributes = ['a', 'b.c'];
      var dups = AB.findDuplicates(data);
      expect(dups).toEqual([{
        a: 1,
        b: {
          c: 1
        },
        d: 5
      }, {
        a: 3,
        b: {
          c: 5
        },
        d: 7
      }]);
    });
    it('should delete duplicates',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee6() {
      var data, AB;
      return _regenerator.default.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              data = [{
                a: 1,
                b: 1,
                c: 4
              }, {
                a: 1,
                b: 1,
                c: 5
              }, {
                a: 3,
                b: 4,
                c: 5
              }, {
                a: 3,
                b: 5,
                c: 5
              }, {
                a: 3,
                b: 5,
                c: 7
              }];
              jest.spyOn(Document, 'fetchAll').mockResolvedValue(data);
              jest.spyOn(Document, 'deleteAll').mockResolvedValue([]);

              AB =
              /*#__PURE__*/
              function (_Document4) {
                (0, _inherits2.default)(AB, _Document4);

                function AB() {
                  (0, _classCallCheck2.default)(this, AB);
                  return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AB).apply(this, arguments));
                }

                return AB;
              }(Document);

              AB.idAttributes = ['a', 'b'];
              _context6.next = 7;
              return AB.deleteDuplicates();

            case 7:
              expect(Document.deleteAll).toHaveBeenCalledWith([{
                a: 1,
                b: 1,
                c: 5
              }, {
                a: 3,
                b: 5,
                c: 7
              }]);

            case 8:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    })));
  });
  it('should not do anything if passed empty list',
  /*#__PURE__*/
  (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee7() {
    var res;
    return _regenerator.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            jest.spyOn(cozyClientJS.data, 'create').mockReset();
            jest.spyOn(cozyClientJS, 'fetchJSON').mockReset();
            _context7.next = 4;
            return Simpson.updateAll([]);

          case 4:
            res = _context7.sent;
            expect(cozyClientJS.data.create).not.toHaveBeenCalled();
            expect(cozyClientJS.fetchJSON).not.toHaveBeenCalled();
            expect(res).toEqual([]);

          case 8:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  })));
  it('should create database when bulk updating',
  /*#__PURE__*/
  (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee8() {
    var res;
    return _regenerator.default.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            jest.spyOn(cozyClientJS.data, 'create').mockReset().mockResolvedValue({
              _id: 1
            });
            jest.spyOn(cozyClientJS, 'fetchJSON').mockReset().mockRejectedValueOnce({
              reason: {
                reason: 'Database does not exist.'
              }
            }).mockImplementationOnce(function (method, doctype, data) {
              return Promise.resolve(data.docs.map(function (doc) {
                return {
                  id: doc._id,
                  _rev: Math.random(),
                  ok: true
                };
              }));
            });
            jest.spyOn(Document, 'updateAll');
            _context8.next = 5;
            return Simpson.updateAll([{
              _id: 1,
              name: 'Marge'
            }, {
              _id: 2,
              name: 'Homer'
            }]);

          case 5:
            res = _context8.sent;
            expect(cozyClientJS.data.create).toHaveBeenCalledWith('io.cozy.simpsons', {
              _id: 1,
              name: 'Marge'
            });
            expect(Simpson.updateAll).toHaveBeenCalledWith([{
              _id: 2,
              name: 'Homer'
            }]);
            expect(res.map(function (doc) {
              return doc.id;
            })).toEqual([1, 2]);

          case 9:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  })));
  it('should do bulk delete',
  /*#__PURE__*/
  (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee9() {
    return _regenerator.default.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return Simpson.deleteAll([{
              _id: 1,
              name: 'Marge'
            }, {
              _id: 2,
              name: 'Homer'
            }]);

          case 2:
            expect(cozyClientJS.fetchJSON).toHaveBeenCalledWith('POST', '/data/io.cozy.simpsons/_bulk_docs', {
              docs: [{
                _deleted: true,
                _id: 1,
                name: 'Marge'
              }, {
                _deleted: true,
                _id: 2,
                name: 'Homer'
              }]
            });

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  })));
  describe('fetch changes', function () {
    beforeEach(function () {
      cozyClientJS.fetchJSON.mockReset();
    });
    afterEach(function () {
      cozyClientJS.fetchJSON.mockReset();
    });
    it('should work in simple case',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee10() {
      var changes;
      return _regenerator.default.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              cozyClientJS.fetchJSON.mockReturnValueOnce(Promise.resolve({
                last_seq: 'new-seq',
                results: [{
                  doc: {
                    _id: '1',
                    name: 'Lisa'
                  }
                }, {
                  doc: null
                }, {
                  doc: {
                    _id: '_design/view'
                  }
                }, {
                  doc: {
                    _id: '2',
                    _deleted: true,
                    name: 'Bart'
                  }
                }]
              }));
              _context10.next = 3;
              return Simpson.fetchChanges('my-seq');

            case 3:
              changes = _context10.sent;
              expect(cozyClientJS.fetchJSON).toHaveBeenCalledWith('GET', '/data/io.cozy.simpsons/_changes?since=my-seq&include_docs=true');
              expect(changes).toEqual({
                newLastSeq: 'new-seq',
                documents: [{
                  _id: '1',
                  name: 'Lisa'
                }]
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    })));
    it('should support query options',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee11() {
      return _regenerator.default.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              cozyClientJS.fetchJSON.mockReturnValueOnce(Promise.resolve({
                last_seq: 'new-seq',
                results: []
              }));
              _context11.next = 3;
              return Simpson.fetchChanges('my-seq', {
                params: {
                  descending: true,
                  limit: 1
                }
              });

            case 3:
              expect(cozyClientJS.fetchJSON).toHaveBeenCalledWith('GET', '/data/io.cozy.simpsons/_changes?since=my-seq&include_docs=true&descending=true&limit=1');

            case 4:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    })));
  });
  describe('query all', function () {
    afterEach(function () {
      cozyClientJS.data.query.mockReset();
    });
    it('should repeatedly call query until all documents have been fetched',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee12() {
      var i, docs;
      return _regenerator.default.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              i = 0;
              cozyClientJS.data.query.mockImplementation(function () {
                var docs;

                if (i == 0) {
                  docs = [{
                    _id: 1,
                    name: 'Lisa'
                  }];
                } else if (i == 1) {
                  docs = [{
                    _id: 2,
                    name: 'Bart'
                  }];
                } else if (i == 2) {
                  docs = [{
                    _id: 3,
                    name: 'Homer'
                  }];
                } else if (i == 3) {
                  docs = [{
                    _id: 4,
                    name: 'Marge'
                  }];
                }

                var resp = {
                  docs: docs,
                  next: i !== 3
                };
                i++;
                return Promise.resolve(resp);
              });
              _context12.next = 4;
              return Simpson.queryAll({
                name: {
                  $exists: true
                }
              });

            case 4:
              docs = _context12.sent;
              expect(cozyClientJS.data.defineIndex).toHaveBeenCalledWith('io.cozy.simpsons', ['name']);
              expect(docs.length).toBe(4);
              expect(cozyClientJS.data.query.mock.calls.slice(-4).map(function (x) {
                return x[1].skip;
              })).toEqual([0, 1, 2, 3]);

            case 8:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    })));
  });
  describe('get all', function () {
    beforeEach(function () {
      cozyClientJS.fetchJSON.mockReset();
    });
    afterEach(function () {
      cozyClientJS.fetchJSON.mockReset();
    });
    it('should work',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee13() {
      var docs;
      return _regenerator.default.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              cozyClientJS.fetchJSON.mockResolvedValueOnce({
                rows: [{
                  doc: {
                    _id: '123abde',
                    name: 'Lisa'
                  }
                }, {
                  doc: {
                    _id: '2123asb',
                    name: 'Bart'
                  }
                }]
              });
              _context13.next = 3;
              return Simpson.getAll(['123abde', '2123asb']);

            case 3:
              docs = _context13.sent;
              expect(cozyClientJS.fetchJSON).toHaveBeenCalledWith('POST', '/data/io.cozy.simpsons/_all_docs?include_docs=true', {
                keys: ['123abde', '2123asb']
              });
              expect(docs).toEqual([{
                _id: '123abde',
                name: 'Lisa'
              }, {
                _id: '2123asb',
                name: 'Bart'
              }]);

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    })));
    it('should return empty list in case of error',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee14() {
      var docs;
      return _regenerator.default.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              cozyClientJS.fetchJSON.mockRejectedValueOnce({
                message: 'not_found'
              });
              _context14.next = 3;
              return Simpson.getAll(['notexisting']);

            case 3:
              docs = _context14.sent;
              expect(docs).toEqual([]);

            case 5:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    })));
  });
  it('should be possible for a subclass to access to the registered cozyClient', function () {
    var SubSimpson =
    /*#__PURE__*/
    function (_Simpson3) {
      (0, _inherits2.default)(SubSimpson, _Simpson3);

      function SubSimpson() {
        (0, _classCallCheck2.default)(this, SubSimpson);
        return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SubSimpson).apply(this, arguments));
      }

      (0, _createClass2.default)(SubSimpson, null, [{
        key: "fetch",
        value: function fetch() {
          this.cozyClient.fetchJSON('GET', '/data/io.cozy.simpsons/_all_docs');
        }
      }]);
      return SubSimpson;
    }(Simpson);

    SubSimpson.fetch();
    expect(cozyClientJS.fetchJSON).toHaveBeenLastCalledWith('GET', '/data/io.cozy.simpsons/_all_docs');
  });
  describe('get', function () {
    it('should throw an error if used with cozy-client-js',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee15() {
      return _regenerator.default.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              expect.assertions(1);
              _context15.next = 3;
              return expect(Simpson.get('lisa')).rejects.toEqual(new Error('This method is not implemented with cozy-client-js'));

            case 3:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    })));
  });
});
describe('Document used with CozyClient', function () {
  beforeEach(function () {
    Document.registerClient(cozyClient);
  });
  afterEach(function () {
    jest.restoreAllMocks();
    Document.cozyClient = null;
  });
  describe('usesCozyClient', function () {
    it('should return true', function () {
      expect(Document.usesCozyClient()).toBe(true);
    });
  });
  describe('getIndex', function () {
    it('should throw an error if used with a CozyClient', function () {
      expect(function () {
        return Document.getIndex('io.cozy.simpsons', ['name']);
      }).toThrow('This method is not implemented yet with CozyClient');
    });
  });
  describe('createOrUpdate', function () {
    describe('duplicate strategies', function () {
      beforeEach(function () {
        jest.spyOn(Simpson, 'queryAll').mockReturnValueOnce([{
          _id: 1,
          name: 'Marge',
          cozyMetadata: {
            updatedAt: new Date('2019-11-19')
          }
        }, {
          _id: 2,
          name: 'Marge',
          cozyMetadata: {
            updatedAt: new Date('2019-11-20')
          }
        }]);
        jest.spyOn(cozyClient, 'save').mockReturnValueOnce();
        jest.spyOn(Simpson, 'deleteAll').mockReturnValueOnce();
      });
      afterEach(function () {
        Simpson.queryAll.mockReset();
        Simpson.deleteAll.mockReset();
      });
      it('should throw if there is more than one corresponding documents (default throw strategy)',
      /*#__PURE__*/
      (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee16() {
        return _regenerator.default.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return expect(Simpson.createOrUpdate({
                  name: 'Marge'
                })).rejects.toThrow("Create or update with selectors that returns more than 1 result\n{\"name\":\"Marge\"}\n[{\"_id\":2,\"name\":\"Marge\",\"cozyMetadata\":{\"updatedAt\":\"2019-11-20T00:00:00.000Z\"}},{\"_id\":1,\"name\":\"Marge\",\"cozyMetadata\":{\"updatedAt\":\"2019-11-19T00:00:00.000Z\"}}]");

              case 2:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16);
      })));
      it('should throw there is more than one corresponding documents (throw strategy)',
      /*#__PURE__*/
      (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee17() {
        return _regenerator.default.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                _context17.next = 2;
                return expect(Simpson.createOrUpdate({
                  name: 'Marge'
                }, {
                  handleDuplicates: 'throw'
                })).rejects.toThrow("Create or update with selectors that returns more than 1 result\n{\"name\":\"Marge\"}\n[{\"_id\":2,\"name\":\"Marge\",\"cozyMetadata\":{\"updatedAt\":\"2019-11-20T00:00:00.000Z\"}},{\"_id\":1,\"name\":\"Marge\",\"cozyMetadata\":{\"updatedAt\":\"2019-11-19T00:00:00.000Z\"}}]");

              case 2:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17);
      })));
      it('should update 1 doc and delete duplicates if there is more than one corresponding documents (remove strategy)',
      /*#__PURE__*/
      (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee18() {
        return _regenerator.default.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                _context18.next = 2;
                return Simpson.createOrUpdate({
                  name: 'Marge'
                }, {
                  handleDuplicates: 'remove'
                });

              case 2:
                expect(cozyClient.save).toHaveBeenCalledWith(Simpson.addCozyMetadata({
                  _id: 2,
                  name: 'Marge'
                }));
                expect(logger).toHaveBeenCalledWith('warn', 'Cleaning duplicates for doctype io.cozy.simpsons (kept: 2, removed: 1)');
                expect(Simpson.deleteAll).toHaveBeenCalledWith([{
                  _id: 1,
                  name: 'Marge',
                  cozyMetadata: expect.any(Object)
                }]);

              case 5:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18);
      })));
    });
    it('should create the document if it does not exist',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee19() {
      return _regenerator.default.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              jest.spyOn(Simpson, 'queryAll').mockReturnValueOnce([]);
              jest.spyOn(Simpson, 'create').mockReturnValueOnce();
              _context19.next = 4;
              return Simpson.createOrUpdate({
                name: 'Marge'
              });

            case 4:
              expect(Simpson.create).toHaveBeenCalledWith(Simpson.addCozyMetadata({
                name: 'Marge'
              }));

            case 5:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    })));
    it('should update the document if it already exists',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee20() {
      return _regenerator.default.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              jest.spyOn(Simpson, 'queryAll').mockReturnValueOnce([{
                name: 'Marge'
              }]);
              jest.spyOn(cozyClient, 'save').mockReturnValueOnce();
              _context20.next = 4;
              return Simpson.createOrUpdate({
                name: 'Marge',
                son: 'Bart'
              });

            case 4:
              expect(cozyClient.save).toHaveBeenCalledWith(Simpson.addCozyMetadata({
                name: 'Marge',
                son: 'Bart'
              }));

            case 5:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20);
    })));
  });
  describe('create', function () {
    afterEach(function () {
      cozyClient.create.mockReset();
    });
    it('should create the document with the given attributes',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee21() {
      var marge;
      return _regenerator.default.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              jest.spyOn(cozyClient, 'create').mockImplementation(function () {});
              marge = {
                name: 'Marge'
              };
              _context21.next = 4;
              return Simpson.create(marge);

            case 4:
              expect(cozyClient.create).toHaveBeenCalledWith('io.cozy.simpsons', marge);

            case 5:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    })));
  });
  describe('query', function () {
    it('should throw an error if used with a CozyClient', function () {
      expect(function () {
        return Document.query({});
      }).toThrow(new Error('This method is not implemented yet with CozyClient'));
    });
  });
  describe('queryAll', function () {
    afterEach(function () {
      cozyClient.stackClient.collection.mockReset();
    });
    it('should return all the documents while there are next documents',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee22() {
      var i, docs;
      return _regenerator.default.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              i = 0;
              cozyClient.stackClient.collection.mockReturnValue({
                find: jest.fn().mockImplementation(function () {
                  var data;

                  if (i == 0) {
                    data = [{
                      _id: 1,
                      _type: 'io.cozy.simpsons',
                      name: 'Lisa'
                    }];
                  } else if (i == 1) {
                    data = [{
                      _id: 2,
                      _type: 'io.cozy.simpsons',
                      name: 'Bart'
                    }];
                  } else if (i == 2) {
                    data = [{
                      _id: 3,
                      _type: 'io.cozy.simpsons',
                      name: 'Homer'
                    }];
                  } else if (i == 3) {
                    data = [{
                      _id: 4,
                      _type: 'io.cozy.simpsons',
                      name: 'Marge'
                    }];
                  }

                  var resp = {
                    data: data,
                    next: i !== 3
                  };
                  i++;
                  return Promise.resolve(resp);
                })
              });
              _context22.next = 4;
              return Simpson.queryAll({
                name: {
                  $exists: true
                }
              });

            case 4:
              docs = _context22.sent;
              expect(docs).toMatchSnapshot();

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    })));
    it('should call fetchAll if no selector is given', function () {
      jest.spyOn(Simpson, 'fetchAll').mockImplementation(function () {});
      Simpson.queryAll();
      expect(Simpson.fetchAll).toHaveBeenCalled();
    });
  });
  describe('getAll', function () {
    beforeEach(function () {
      cozyClient.stackClient.fetchJSON.mockReset();
    });
    afterEach(function () {
      cozyClient.stackClient.fetchJSON.mockReset();
    });
    it('should work',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee23() {
      var docs;
      return _regenerator.default.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              cozyClient.stackClient.fetchJSON.mockResolvedValueOnce({
                rows: [{
                  doc: {
                    _id: '123abde',
                    name: 'Lisa'
                  }
                }, {
                  doc: {
                    _id: '2123asb',
                    name: 'Bart'
                  }
                }]
              });
              _context23.next = 3;
              return Simpson.getAll(['123abde', '2123asb']);

            case 3:
              docs = _context23.sent;
              expect(cozyClient.stackClient.fetchJSON).toHaveBeenCalledWith('POST', '/data/io.cozy.simpsons/_all_docs?include_docs=true', {
                keys: ['123abde', '2123asb']
              });
              expect(docs).toEqual([{
                _id: '123abde',
                name: 'Lisa'
              }, {
                _id: '2123asb',
                name: 'Bart'
              }]);

            case 6:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23);
    })));
    it('should return empty list in case of error',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee24() {
      var docs;
      return _regenerator.default.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              cozyClient.stackClient.fetchJSON.mockRejectedValueOnce({
                message: 'not_found'
              });
              _context24.next = 3;
              return Simpson.getAll(['notexisting']);

            case 3:
              docs = _context24.sent;
              expect(docs).toEqual([]);

            case 5:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    })));
  });
  describe('fetchChanges', function () {
    beforeEach(function () {
      cozyClient.stackClient.fetchJSON.mockReset();
    });
    afterEach(function () {
      cozyClient.stackClient.fetchJSON.mockReset();
    });
    it('should work in simple case',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee25() {
      var changes;
      return _regenerator.default.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              cozyClient.stackClient.fetchJSON.mockReturnValueOnce(Promise.resolve({
                last_seq: 'new-seq',
                results: [{
                  doc: {
                    _id: '1',
                    name: 'Lisa'
                  }
                }, {
                  doc: null
                }, {
                  doc: {
                    _id: '_design/view'
                  }
                }, {
                  doc: {
                    _id: '2',
                    _deleted: true,
                    name: 'Bart'
                  }
                }]
              }));
              _context25.next = 3;
              return Simpson.fetchChanges('my-seq');

            case 3:
              changes = _context25.sent;
              expect(cozyClient.stackClient.fetchJSON).toHaveBeenCalledWith('GET', '/data/io.cozy.simpsons/_changes?since=my-seq&include_docs=true');
              expect(changes).toEqual({
                newLastSeq: 'new-seq',
                documents: [{
                  _id: '1',
                  name: 'Lisa'
                }]
              });

            case 6:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25);
    })));
    it('should support query options',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee26() {
      return _regenerator.default.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              cozyClient.stackClient.fetchJSON.mockReturnValueOnce(Promise.resolve({
                last_seq: 'new-seq',
                results: []
              }));
              _context26.next = 3;
              return Simpson.fetchChanges('my-seq', {
                params: {
                  descending: true,
                  limit: 1
                }
              });

            case 3:
              expect(cozyClient.stackClient.fetchJSON).toHaveBeenCalledWith('GET', '/data/io.cozy.simpsons/_changes?since=my-seq&include_docs=true&descending=true&limit=1');

            case 4:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    })));
  });
  describe('fetchAll', function () {
    it('should do bulk fetch',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee27() {
      return _regenerator.default.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              _context27.next = 2;
              return Simpson.fetchAll();

            case 2:
              expect(cozyClient.stackClient.fetchJSON).toHaveBeenCalledWith('GET', '/data/io.cozy.simpsons/_all_docs?include_docs=true');

            case 3:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    })));
  });
  describe('updateAll', function () {
    beforeEach(function () {
      cozyClient.stackClient.fetchJSON.mockReset();
    });
    afterEach(function () {
      cozyClient.stackClient.fetchJSON.mockReset();
    });
    it('should not do anything if passed empty list',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee28() {
      var res;
      return _regenerator.default.wrap(function _callee28$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              _context28.next = 2;
              return Simpson.updateAll([]);

            case 2:
              res = _context28.sent;
              expect(cozyClient.stackClient.fetchJSON).not.toHaveBeenCalled();
              expect(res).toEqual([]);

            case 5:
            case "end":
              return _context28.stop();
          }
        }
      }, _callee28);
    })));
  });
  describe('get', function () {
    it('should return the item that has given id',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee29() {
      var getSpy, result;
      return _regenerator.default.wrap(function _callee29$(_context29) {
        while (1) {
          switch (_context29.prev = _context29.next) {
            case 0:
              getSpy = jest.fn().mockResolvedValue({
                data: {
                  _id: 'marge',
                  _type: 'io.cozy.simpsons',
                  name: 'Marge Simpson'
                }
              });
              cozyClient.stackClient.collection.mockReturnValue({
                get: getSpy
              });
              _context29.next = 4;
              return Simpson.get('marge');

            case 4:
              result = _context29.sent;
              expect(result).toEqual({
                _id: 'marge',
                _type: 'io.cozy.simpsons',
                name: 'Marge Simpson'
              });

            case 6:
            case "end":
              return _context29.stop();
          }
        }
      }, _callee29);
    })));
    it('should throw an error if no doctype is given',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee30() {
      var VanHouten;
      return _regenerator.default.wrap(function _callee30$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              VanHouten =
              /*#__PURE__*/
              function (_Document5) {
                (0, _inherits2.default)(VanHouten, _Document5);

                function VanHouten() {
                  (0, _classCallCheck2.default)(this, VanHouten);
                  return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(VanHouten).apply(this, arguments));
                }

                return VanHouten;
              }(Document);

              expect.assertions(1);
              _context30.next = 4;
              return expect(VanHouten.get('milhouse')).rejects.toEqual(new Error('doctype is not defined'));

            case 4:
            case "end":
              return _context30.stop();
          }
        }
      }, _callee30);
    })));
  });
});
describe('copyWithClient', function () {
  afterEach(function () {
    Document.cozyClient = null;
  });
  it('should return a class bound to a new client', function () {
    var newClient = {};
    var MyDocument = Document.copyWithClient(newClient);
    expect(MyDocument.cozyClient).toBe(newClient);
    expect(Document.cozyClient).toBe(null);
  });
  it('should return an extension of the base class', function () {
    var ExtendedClass =
    /*#__PURE__*/
    function (_Document6) {
      (0, _inherits2.default)(ExtendedClass, _Document6);

      function ExtendedClass() {
        (0, _classCallCheck2.default)(this, ExtendedClass);
        return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ExtendedClass).apply(this, arguments));
      }

      (0, _createClass2.default)(ExtendedClass, null, [{
        key: "myExtendedMethod",
        value: function myExtendedMethod() {
          return 'myExtendedMethod called';
        }
      }]);
      return ExtendedClass;
    }(Document);

    var newClient = {};
    var MyClass = ExtendedClass.copyWithClient(newClient);
    expect(MyClass.myExtendedMethod()).toEqual('myExtendedMethod called');
  });
  it('should not interfere with an existing Document class', function () {
    var newClient = {};
    var MyDocument = Document.copyWithClient(newClient);
    Document.registerClient(cozyClient);
    expect(MyDocument.cozyClient).toBe(newClient);
    expect(Document.cozyClient).toBe(cozyClient);
  });
  it('should work even if Document had a registered client', function () {
    Document.registerClient(cozyClient);
    var newClient = {};
    var MyDocument = Document.copyWithClient(newClient);
    expect(MyDocument.cozyClient).toBe(newClient);
    expect(Document.cozyClient).toBe(cozyClient);
  });
});