"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var omit = require('lodash/omit');

var pick = require('lodash/pick');

var size = require('lodash/size');

var omitBy = require('lodash/omitBy');

var isUndefined = require('lodash/isUndefined');

var fromPairs = require('lodash/fromPairs');

var pickBy = require('lodash/pickBy');

var flatMap = require('lodash/flatMap');

var groupBy = require('lodash/groupBy');

var sortBy = require('lodash/sortBy');

var get = require('lodash/get');

var _require = require('./utils'),
    parallelMap = _require.parallelMap;

var CozyClient = require('cozy-client/dist/CozyClient').default;

var log = require('cozy-logger').namespace('Document');

var querystring = require('querystring');

var DATABASE_DOES_NOT_EXIST = 'Database does not exist.';
/**
 * Tell of two object attributes have any difference
 */

function isDifferent(o1, o2) {
  // This is not supposed to happen
  if (Object.keys(o1).length === 0) return true;

  for (var key in o1) {
    if (o1[key] !== o2[key]) {
      return true;
    }
  }

  return false;
}

var indexes = {}; // Attributes that will not be updated since the
// user can change them

var userAttributes = ['shortLabel'];

function sanitizeKey(key) {
  if (key.startsWith('\\')) {
    return key.slice(1);
  }

  return key;
}

function updateCreatedByApp(cozyMetadata, appSlug) {
  if (!cozyMetadata.updatedByApps) {
    cozyMetadata.updatedByApps = [];
  }

  var now = new Date();
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = cozyMetadata.updatedByApps[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var appInfo = _step.value;

      if (appInfo.slug === appSlug) {
        appInfo.date = now;
        return;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  cozyMetadata.updatedByApps.push({
    slug: appSlug,
    date: now
  });
}

var withoutUndefined = function withoutUndefined(x) {
  return omitBy(x, isUndefined);
};

var flagForDeletion = function flagForDeletion(x) {
  return Object.assign({}, x, {
    _deleted: true
  });
};

var getDocumentUpdateDate = function getDocumentUpdateDate(doc) {
  var d = doc.cozyMetadata && doc.cozyMetadata.updatedAt;
  return d ? new Date(d) : null;
};

var newestDocumentComparisonFunc = function newestDocumentComparisonFunc(doc) {
  var d = getDocumentUpdateDate(doc);
  return d ? -d : 0;
};

var Document =
/*#__PURE__*/
function () {
  function Document() {
    (0, _classCallCheck2.default)(this, Document);
  }

  (0, _createClass2.default)(Document, null, [{
    key: "registerClient",

    /**
     * Registers a client
     *
     * @param {Client} client - Cozy client from either cozy-client or cozy-client-js
     */
    value: function registerClient(client) {
      if (!this.cozyClient) {
        this.cozyClient = client;
      } else {
        // eslint-disable-next-line no-console
        console.warn('Document already has been registered, this is not possible to re-register as the client is shared globally between all classes. This is to prevent concurrency bugs.');
        throw new Error('Document cannot be re-registered to a client.');
      }
    }
    /**
     * @static copyWithClient - Returns a new class bound to a client
     *
     * @param  {type} client Client instance
     * @returns {type}        A new class, with the client registered
     */

  }, {
    key: "copyWithClient",
    value: function copyWithClient(client) {
      var BaseClass = this;

      var ExtendedClass =
      /*#__PURE__*/
      function (_BaseClass) {
        (0, _inherits2.default)(ExtendedClass, _BaseClass);

        function ExtendedClass() {
          (0, _classCallCheck2.default)(this, ExtendedClass);
          return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ExtendedClass).apply(this, arguments));
        }

        return ExtendedClass;
      }(BaseClass);

      ExtendedClass.cozyClient = null;
      ExtendedClass.registerClient(client);
      return ExtendedClass;
    }
    /**
     * Returns true if Document uses a CozyClient (from cozy-client package)
     *
     * @returns {boolean} true if Document uses a CozyClient
     **/

  }, {
    key: "usesCozyClient",
    value: function usesCozyClient() {
      return this.cozyClient instanceof CozyClient;
    }
  }, {
    key: "getIndex",
    value: function getIndex(doctype, fields) {
      if (this.usesCozyClient()) {
        throw new Error('This method is not implemented yet with CozyClient');
      }

      return this.getIndexViaOldClient(doctype, fields);
    }
  }, {
    key: "getIndexViaOldClient",
    value: function getIndexViaOldClient(doctype, fields) {
      var key = "".concat(doctype, ":").concat(fields.slice().join(','));
      var index = indexes[key];

      if (!index) {
        indexes[key] = this.cozyClient.data.defineIndex(doctype, fields).then(function (index) {
          indexes[key] = index;
          return index;
        });
      }

      return Promise.resolve(indexes[key]);
    }
  }, {
    key: "addCozyMetadata",
    value: function addCozyMetadata(attributes) {
      if (!attributes.cozyMetadata) {
        attributes.cozyMetadata = {};
      }

      attributes.cozyMetadata.updatedAt = new Date();

      if (!attributes.cozyMetadata.createdByApp && this.createdByApp) {
        attributes.cozyMetadata.createdByApp = this.createdByApp;
      }

      if (this.createdByApp) {
        updateCreatedByApp(attributes.cozyMetadata, this.createdByApp);
      }

      return attributes;
    }
    /**
     * Returns the item that has this id
     *
     * @param {string} id - The id of an item in the collection
     * @returns {object}  - The collection's item that has this id
     *
     */

  }, {
    key: "get",
    value: function () {
      var _get = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(id) {
        var resp;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (this.usesCozyClient()) {
                  _context.next = 2;
                  break;
                }

                throw new Error('This method is not implemented with cozy-client-js');

              case 2:
                if (this.doctype) {
                  _context.next = 4;
                  break;
                }

                throw new Error('doctype is not defined');

              case 4:
                _context.next = 6;
                return this.cozyClient.collection(this.doctype).get(id);

              case 6:
                resp = _context.sent;
                return _context.abrupt("return", resp.data);

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function get(_x) {
        return _get.apply(this, arguments);
      }

      return get;
    }()
    /**
     * Creates or updates a document.
     *
     * Before creating/updating, we try to find an existing document by
     * building a selector with the idAttributes.
     *
     * - If not document is found, document is created
     * - If a document is found, it is updated
     * - If duplicates are found, it depends on options.handleDuplicates
     *
     * @param {String|Function} options.handleDuplicates - How duplicates are handled, see Document.duplicateHandlingStrategies
     */

  }, {
    key: "createOrUpdate",
    value: function () {
      var _createOrUpdate = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee2(attributes) {
        var options,
            _args2 = arguments;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};

                if (!this.usesCozyClient()) {
                  _context2.next = 3;
                  break;
                }

                return _context2.abrupt("return", this.createOrUpdateViaNewClient(attributes, options));

              case 3:
                return _context2.abrupt("return", this.createOrUpdateViaOldClient(attributes, options));

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function createOrUpdate(_x2) {
        return _createOrUpdate.apply(this, arguments);
      }

      return createOrUpdate;
    }()
    /**
     * Update a document with `update` attributes. If the
     * `update` does not concern "important" attributes, the original
     * document is returned. Otherwise, the update document is
     * returned with metadata updated.
     *
     * @private
     */

  }, {
    key: "applyUpdateIfDifferent",
    value: function applyUpdateIfDifferent(doc, update) {
      // only update if some fields are different
      if (!this.checkAttributes || isDifferent(pick(doc, this.checkAttributes), pick(update, this.checkAttributes))) {
        // do not emit a mail for those attribute updates
        delete update.dateImport;
        var updatedDoc = this.addCozyMetadata((0, _objectSpread2.default)({}, doc, update));
        return updatedDoc;
      } else {
        log('debug', "[updateIfDifferent] No need to update ".concat(update._id, " because its `checkedAttributes` (").concat(this.checkAttributes, ") didn't change."));
        return doc;
      }
    }
  }, {
    key: "getHandleDuplicateStrategy",
    value: function getHandleDuplicateStrategy(name) {
      if (Document.duplicateHandlingStrategies[name]) {
        return Document.duplicateHandlingStrategies[name];
      } else {
        throw new Error("".concat(name, " is not a know duplication handling strategy. Known strategies are ").concat(Object.keys(Document.duplicateHandlingStrategies)));
      }
    }
  }, {
    key: "handleDuplicates",
    value: function () {
      var _handleDuplicates = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee3(strategyNameOrFn, duplicates, selector) {
        var strategyFn;
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                strategyNameOrFn = strategyNameOrFn || this.defaultDuplicateHandling;
                strategyFn = typeof strategyNameOrFn === 'string' ? this.getHandleDuplicateStrategy(strategyNameOrFn) : strategyNameOrFn;
                _context3.next = 4;
                return strategyFn.call(this, duplicates, selector);

              case 4:
                return _context3.abrupt("return", _context3.sent);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function handleDuplicates(_x3, _x4, _x5) {
        return _handleDuplicates.apply(this, arguments);
      }

      return handleDuplicates;
    }()
  }, {
    key: "createOrUpdateViaNewClient",
    value: function () {
      var _createOrUpdateViaNewClient = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee4(attributes, options) {
        var selector, results, compactedSelector, doc, update, updatedDoc;
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                selector = fromPairs(this.idAttributes.map(function (idAttribute) {
                  return [idAttribute, get(attributes, sanitizeKey(idAttribute))];
                }));
                results = [];
                compactedSelector = withoutUndefined(selector);

                if (!(size(compactedSelector) === this.idAttributes.length)) {
                  _context4.next = 7;
                  break;
                }

                _context4.next = 6;
                return this.queryAll(selector);

              case 6:
                results = _context4.sent;

              case 7:
                if (!(results.length === 0)) {
                  _context4.next = 11;
                  break;
                }

                return _context4.abrupt("return", this.create(this.addCozyMetadata(attributes)));

              case 11:
                results = sortBy(results, newestDocumentComparisonFunc);

                if (!(results.length > 1)) {
                  _context4.next = 15;
                  break;
                }

                _context4.next = 15;
                return this.handleDuplicates(options.handleDuplicates, results, selector);

              case 15:
                doc = results[0];
                update = omit(attributes, userAttributes);
                updatedDoc = this.applyUpdateIfDifferent(doc, update);

                if (!(updatedDoc !== doc)) {
                  _context4.next = 22;
                  break;
                }

                return _context4.abrupt("return", this.cozyClient.save(updatedDoc));

              case 22:
                return _context4.abrupt("return", updatedDoc);

              case 23:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function createOrUpdateViaNewClient(_x6, _x7) {
        return _createOrUpdateViaNewClient.apply(this, arguments);
      }

      return createOrUpdateViaNewClient;
    }()
  }, {
    key: "createOrUpdateViaOldClient",
    value: function () {
      var _createOrUpdateViaOldClient = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee5(attributes, options) {
        var selector, results, compactedSelector, index, doc, update, updatedDoc;
        return _regenerator.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                selector = fromPairs(this.idAttributes.map(function (idAttribute) {
                  return [idAttribute, get(attributes, sanitizeKey(idAttribute))];
                }));
                results = [];
                compactedSelector = withoutUndefined(selector);

                if (!(size(compactedSelector) === this.idAttributes.length)) {
                  _context5.next = 10;
                  break;
                }

                _context5.next = 6;
                return this.getIndex(this.doctype, this.idAttributes);

              case 6:
                index = _context5.sent;
                _context5.next = 9;
                return this.cozyClient.data.query(index, {
                  selector: selector
                });

              case 9:
                results = _context5.sent;

              case 10:
                if (!(results.length === 0)) {
                  _context5.next = 14;
                  break;
                }

                return _context5.abrupt("return", this.cozyClient.data.create(this.doctype, this.addCozyMetadata(attributes)));

              case 14:
                results = sortBy(results, newestDocumentComparisonFunc);

                if (!(results.length > 1)) {
                  _context5.next = 18;
                  break;
                }

                _context5.next = 18;
                return this.handleDuplicates(options.handleDuplicates, results, selector);

              case 18:
                doc = results[0];
                update = omit(attributes, userAttributes);
                updatedDoc = this.applyUpdateIfDifferent(doc, update);

                if (!(updatedDoc !== doc)) {
                  _context5.next = 25;
                  break;
                }

                return _context5.abrupt("return", this.cozyClient.data.updateAttributes(this.doctype, updatedDoc._id, updatedDoc));

              case 25:
                return _context5.abrupt("return", doc);

              case 26:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function createOrUpdateViaOldClient(_x8, _x9) {
        return _createOrUpdateViaOldClient.apply(this, arguments);
      }

      return createOrUpdateViaOldClient;
    }()
  }, {
    key: "create",
    value: function create(attributes) {
      if (this.usesCozyClient()) {
        return this.createViaNewClient(attributes);
      }

      return this.createViaOldClient(attributes);
    }
  }, {
    key: "createViaNewClient",
    value: function createViaNewClient(attributes) {
      return this.cozyClient.create(this.doctype, attributes);
    }
  }, {
    key: "createViaOldClient",
    value: function createViaOldClient(attributes) {
      return this.cozyClient.data.create(this.doctype, attributes);
    }
    /**
     * Save many documents concurrently
     */

  }, {
    key: "bulkSave",
    value: function bulkSave(documents, optionsOrConcurrency, logProgressOrNothing) {
      if (logProgressOrNothing || typeof optionsOrConcurrency !== 'object') {
        log('warn', 'Second argument of bulkSave is now an object, please use bulkSave(documents, { logProgress, concurrency })');
      }

      var options = {};

      if (typeof optionsOrConcurrency === 'number') {
        options.concurrency = optionsOrConcurrency;
      }

      if (typeof logProgressOrNothing === 'function') {
        options.logProgress = logProgressOrNothing;
      }

      if (typeof optionsOrConcurrency === 'object') {
        Object.assign(options, optionsOrConcurrency);
      }

      return this._bulkSave(documents, options);
    }
    /**
     * @private
     *
     * Meat of the method bulkSave
     */

  }, {
    key: "_bulkSave",
    value: function _bulkSave(documents) {
      var _this = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _options$concurrency = options.concurrency,
          concurrency = _options$concurrency === void 0 ? 30 : _options$concurrency,
          logProgress = options.logProgress,
          createOrUpdateOptions = (0, _objectWithoutProperties2.default)(options, ["concurrency", "logProgress"]);
      return parallelMap(documents, function (doc) {
        if (logProgress) {
          logProgress(doc);
        }

        return _this.createOrUpdate(doc, createOrUpdateOptions);
      }, concurrency);
    }
  }, {
    key: "query",
    value: function query(index, options) {
      if (this.usesCozyClient()) {
        throw new Error('This method is not implemented yet with CozyClient');
      }

      return this.queryViaOldClient(index, options);
    }
  }, {
    key: "queryViaOldClient",
    value: function queryViaOldClient(index, options) {
      return this.cozyClient.data.query(index, options);
    }
  }, {
    key: "fetchAll",
    value: function () {
      var _fetchAll = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee6() {
        var stackClient, result;
        return _regenerator.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                stackClient = this.usesCozyClient() ? this.cozyClient.stackClient : this.cozyClient;
                _context6.prev = 1;
                _context6.next = 4;
                return stackClient.fetchJSON('GET', "/data/".concat(this.doctype, "/_all_docs?include_docs=true"));

              case 4:
                result = _context6.sent;
                return _context6.abrupt("return", result.rows.filter(function (x) {
                  return x.id.indexOf('_design') !== 0 && x.doc;
                }).map(function (x) {
                  return x.doc;
                }));

              case 8:
                _context6.prev = 8;
                _context6.t0 = _context6["catch"](1);

                if (!(_context6.t0 && _context6.t0.response && _context6.t0.response.status && _context6.t0.response.status === 404)) {
                  _context6.next = 14;
                  break;
                }

                return _context6.abrupt("return", []);

              case 14:
                return _context6.abrupt("return", []);

              case 15:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this, [[1, 8]]);
      }));

      function fetchAll() {
        return _fetchAll.apply(this, arguments);
      }

      return fetchAll;
    }()
  }, {
    key: "updateAll",
    value: function () {
      var _updateAll = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee7(docs) {
        var stackClient, update, firstDoc, resp;
        return _regenerator.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                stackClient = this.usesCozyClient() ? this.cozyClient.stackClient : this.cozyClient;

                if (!(!docs || !docs.length)) {
                  _context7.next = 3;
                  break;
                }

                return _context7.abrupt("return", Promise.resolve([]));

              case 3:
                _context7.prev = 3;
                _context7.next = 6;
                return stackClient.fetchJSON('POST', "/data/".concat(this.doctype, "/_bulk_docs"), {
                  docs: docs
                });

              case 6:
                update = _context7.sent;
                return _context7.abrupt("return", update);

              case 10:
                _context7.prev = 10;
                _context7.t0 = _context7["catch"](3);

                if (!(_context7.t0.reason && _context7.t0.reason.reason && _context7.t0.reason.reason == DATABASE_DOES_NOT_EXIST)) {
                  _context7.next = 23;
                  break;
                }

                _context7.next = 15;
                return this.create(docs[0]);

              case 15:
                firstDoc = _context7.sent;
                _context7.next = 18;
                return this.updateAll(docs.slice(1));

              case 18:
                resp = _context7.sent;
                resp.unshift({
                  ok: true,
                  id: firstDoc._id,
                  rev: firstDoc._rev
                });
                return _context7.abrupt("return", resp);

              case 23:
                throw _context7.t0;

              case 24:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this, [[3, 10]]);
      }));

      function updateAll(_x10) {
        return _updateAll.apply(this, arguments);
      }

      return updateAll;
    }()
  }, {
    key: "deleteAll",
    value: function () {
      var _deleteAll = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee8(docs) {
        return _regenerator.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                return _context8.abrupt("return", this.updateAll(docs.map(flagForDeletion)));

              case 1:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function deleteAll(_x11) {
        return _deleteAll.apply(this, arguments);
      }

      return deleteAll;
    }()
    /**
     * Find duplicates in a list of documents according to the
     * idAttributes of the class. Priority is given to the document
     * prior in the list.
     *
     * To introduce the notion of priority, you can sort your input docs
     * according to this priorirty.
     *
     * @param  {Array[object]} docs
     * @return {Array[object]} Duplicates
     */

  }, {
    key: "findDuplicates",
    value: function findDuplicates(docs) {
      var fieldSeparator = '#$$$$#';
      var idAttributes = this.idAttributes;

      var key = function key(doc) {
        return idAttributes.map(function (idAttrPath) {
          return get(doc, idAttrPath);
        }).join(fieldSeparator);
      };

      var groups = pickBy(groupBy(docs, key), function (group) {
        return group.length > 1;
      });
      var duplicates = flatMap(groups, function (group) {
        return group.slice(1);
      });
      return duplicates;
    }
    /**
     * Delete duplicates on the server. Find duplicates according to the
     * idAttributes.
     *
     * @param  {Function} Priority (optional). Among duplicates, which one should be prioritized)
     * @return {Promise}
     * @example
     * ```
     * deleteDuplicates(doc => -doc.dateImport) // will duplicate documents so that the oldest document is conserved
     * ```
     */

  }, {
    key: "deleteDuplicates",
    value: function () {
      var _deleteDuplicates = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee9(priorityFn) {
        var allDocs, duplicates;
        return _regenerator.default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.fetchAll();

              case 2:
                allDocs = _context9.sent;

                if (priorityFn) {
                  allDocs = sortBy(allDocs, priorityFn);
                }

                duplicates = this.findDuplicates(allDocs);
                return _context9.abrupt("return", this.deleteAll(duplicates));

              case 6:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function deleteDuplicates(_x12) {
        return _deleteDuplicates.apply(this, arguments);
      }

      return deleteDuplicates;
    }()
    /**
     * Use Couch _changes API
     *
     * @param  {string} since     Starting sequence for changes
     * @param  {[type]} options   { includeDesign: false, includeDeleted: false }
     */

  }, {
    key: "fetchChanges",
    value: function () {
      var _fetchChanges = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee10(since) {
        var options,
            stackClient,
            queryParams,
            result,
            newLastSeq,
            docs,
            _args10 = arguments;
        return _regenerator.default.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                options = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : {};
                stackClient = this.usesCozyClient() ? this.cozyClient.stackClient : this.cozyClient;
                queryParams = {
                  since: since,
                  include_docs: 'true'
                };

                if (options.params) {
                  Object.assign(queryParams, options.params);
                }

                _context10.next = 6;
                return stackClient.fetchJSON('GET', "/data/".concat(this.doctype, "/_changes?").concat(querystring.stringify(queryParams)));

              case 6:
                result = _context10.sent;
                newLastSeq = result.last_seq;
                docs = result.results.map(function (x) {
                  return x.doc;
                }).filter(Boolean);

                if (!options.includeDesign) {
                  docs = docs.filter(function (doc) {
                    return doc._id.indexOf('_design') !== 0;
                  });
                }

                if (!options.includeDeleted) {
                  docs = docs.filter(function (doc) {
                    return !doc._deleted;
                  });
                }

                return _context10.abrupt("return", {
                  newLastSeq: newLastSeq,
                  documents: docs
                });

              case 12:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function fetchChanges(_x13) {
        return _fetchChanges.apply(this, arguments);
      }

      return fetchChanges;
    }()
    /**
     * Fetches all documents for a given doctype exceeding the 100 limit.
     * It is slower that fetchAll because it fetches the data 100 by 100 but allows to filter the data
     * with a selector and an index
     *
     * Parameters:
     *
     * * `selector` (object): the mango query selector
     * * `index` (object): (optional) the query selector index. If not defined, the function will
     * create it's own index with the keys specified in the selector
     *
     *
     * ```javascript
     * const documents = await Bills.queryAll({vendor: 'Direct Energie'})
     * ```
     *
     */

  }, {
    key: "queryAll",
    value: function () {
      var _queryAll = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee11(selector, index) {
        return _regenerator.default.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                if (!this.usesCozyClient()) {
                  _context11.next = 2;
                  break;
                }

                return _context11.abrupt("return", this.queryAllViaNewClient(selector));

              case 2:
                return _context11.abrupt("return", this.queryAllViaOldClient(selector, index));

              case 3:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function queryAll(_x14, _x15) {
        return _queryAll.apply(this, arguments);
      }

      return queryAll;
    }()
  }, {
    key: "queryAllViaNewClient",
    value: function () {
      var _queryAllViaNewClient = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee12(selector) {
        var result, query, resp;
        return _regenerator.default.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                if (selector) {
                  _context12.next = 2;
                  break;
                }

                return _context12.abrupt("return", this.fetchAll());

              case 2:
                result = [];
                query = this.cozyClient.find(this.doctype).where(selector);
                resp = {
                  next: true
                };

              case 5:
                if (!(resp && resp.next)) {
                  _context12.next = 12;
                  break;
                }

                _context12.next = 8;
                return this.cozyClient.query(query.offset(result.length));

              case 8:
                resp = _context12.sent;
                result.push.apply(result, (0, _toConsumableArray2.default)(resp.data));
                _context12.next = 5;
                break;

              case 12:
                return _context12.abrupt("return", result);

              case 13:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function queryAllViaNewClient(_x16) {
        return _queryAllViaNewClient.apply(this, arguments);
      }

      return queryAllViaNewClient;
    }()
  }, {
    key: "queryAllViaOldClient",
    value: function () {
      var _queryAllViaOldClient = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee13(selector, index) {
        var result, resp;
        return _regenerator.default.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                if (selector) {
                  _context13.next = 4;
                  break;
                }

                _context13.next = 3;
                return this.fetchAll();

              case 3:
                return _context13.abrupt("return", _context13.sent);

              case 4:
                if (index) {
                  _context13.next = 8;
                  break;
                }

                _context13.next = 7;
                return this.cozyClient.data.defineIndex(this.doctype, Object.keys(selector));

              case 7:
                index = _context13.sent;

              case 8:
                result = [];
                resp = {
                  next: true
                };

              case 10:
                if (!(resp && resp.next)) {
                  _context13.next = 17;
                  break;
                }

                _context13.next = 13;
                return this.cozyClient.data.query(index, {
                  selector: selector,
                  wholeResponse: true,
                  skip: result.length
                });

              case 13:
                resp = _context13.sent;
                result.push.apply(result, (0, _toConsumableArray2.default)(resp.docs));
                _context13.next = 10;
                break;

              case 17:
                return _context13.abrupt("return", result);

              case 18:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function queryAllViaOldClient(_x17, _x18) {
        return _queryAllViaOldClient.apply(this, arguments);
      }

      return queryAllViaOldClient;
    }()
    /**
     * Fetch in one request a batch of documents by id.
     * @param  {String[]} ids - Ids of documents to fetch
     * @return {Promise} - Promise resolving to an array of documents, unfound document are filtered
     */

  }, {
    key: "getAll",
    value: function () {
      var _getAll = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee14(ids) {
        var stackClient, resp, rows;
        return _regenerator.default.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                stackClient = this.usesCozyClient() ? this.cozyClient.stackClient : this.cozyClient;
                _context14.prev = 1;
                _context14.next = 4;
                return stackClient.fetchJSON('POST', "/data/".concat(this.doctype, "/_all_docs?include_docs=true"), {
                  keys: ids
                });

              case 4:
                resp = _context14.sent;
                _context14.next = 12;
                break;

              case 7:
                _context14.prev = 7;
                _context14.t0 = _context14["catch"](1);

                if (!_context14.t0.message.match(/not_found/)) {
                  _context14.next = 11;
                  break;
                }

                return _context14.abrupt("return", []);

              case 11:
                throw _context14.t0;

              case 12:
                rows = resp.rows.filter(function (row) {
                  return row.doc;
                });
                return _context14.abrupt("return", rows.map(function (row) {
                  return row.doc;
                }));

              case 14:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this, [[1, 7]]);
      }));

      function getAll(_x19) {
        return _getAll.apply(this, arguments);
      }

      return getAll;
    }()
  }]);
  return Document;
}();

Document.defaultDuplicateHandling = 'throw';
Document.duplicateHandlingStrategies = {
  throw: function _throw(duplicates, selector) {
    throw new Error('Create or update with selectors that returns more than 1 result\n' + JSON.stringify(selector) + '\n' + JSON.stringify(duplicates));
  },
  remove: function () {
    var _remove = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee15(duplicates) {
      var docsToRemove;
      return _regenerator.default.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              docsToRemove = duplicates.slice(1);

              if (!(docsToRemove.length > 0)) {
                _context15.next = 5;
                break;
              }

              log('warn', "Cleaning duplicates for doctype ".concat(this.doctype, " (kept: ").concat(duplicates[0]._id, ", removed: ").concat(docsToRemove.map(function (x) {
                return x._id;
              }), ")"));
              _context15.next = 5;
              return this.deleteAll(docsToRemove);

            case 5:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15, this);
    }));

    function remove(_x20) {
      return _remove.apply(this, arguments);
    }

    return remove;
  }()
};
module.exports = Document;