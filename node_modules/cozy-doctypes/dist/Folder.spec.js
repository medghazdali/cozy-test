"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _require = require('./testUtils'),
    cozyClient = _require.cozyClient;

var CozyFolder = require('./Folder');

describe('Folder model', function () {
  beforeAll(function () {
    CozyFolder.registerClient(cozyClient);
  });
  afterEach(function () {
    jest.restoreAllMocks();
  });
  it('should expose magic folders', function () {
    expect(CozyFolder.magicFolders).toBeDefined();
    expect(CozyFolder.magicFolders.ADMINISTRATIVE).toBeDefined();
    expect(CozyFolder.magicFolders.PHOTOS).toBeDefined();
    expect(CozyFolder.magicFolders.PHOTOS_UPLOAD).toBeDefined();
    expect(CozyFolder.magicFolders.PHOTOS_BACKUP).toBeDefined();
  });
  describe('ensureMagicFolder', function () {
    beforeEach(function () {
      jest.spyOn(CozyFolder, 'getReferencedFolders').mockResolvedValue([]);
    });
    it('should return first existing magic folder',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee() {
      var existingMagicFolders, result;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              existingMagicFolders = [{
                attributes: {
                  path: '/Administrative'
                }
              }, {
                attributes: {
                  path: '/Administrative2'
                }
              }];
              jest.spyOn(CozyFolder, 'getReferencedFolders').mockResolvedValue(existingMagicFolders);
              _context.next = 4;
              return CozyFolder.ensureMagicFolder(CozyFolder.magicFolders.ADMINISTRATIVE);

            case 4:
              result = _context.sent;
              expect(result).toEqual(existingMagicFolders[0]);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
    it('should throw if magic folder id is invalid',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee2() {
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return expect(CozyFolder.ensureMagicFolder('io.cozy.apps/unexpected/magic/folder')).rejects.toThrow();

            case 2:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })));
    it('should throw if path is missing',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee3() {
      return _regenerator.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return expect(CozyFolder.ensureMagicFolder(CozyFolder.magicFolders.ADMINISTRATIVE)).rejects.toThrow();

            case 2:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    })));
    it('should create magic folder',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee4() {
      var expectedCreatedFolder, result;
      return _regenerator.default.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              expectedCreatedFolder = {
                attributes: {
                  path: '/Administrative'
                }
              };
              jest.spyOn(CozyFolder, 'createFolderWithReference').mockResolvedValue(expectedCreatedFolder);
              _context4.next = 4;
              return CozyFolder.ensureMagicFolder(CozyFolder.magicFolders.ADMINISTRATIVE, '/Administrative');

            case 4:
              result = _context4.sent;
              expect(CozyFolder.createFolderWithReference).toHaveBeenCalledWith('/Administrative', {
                _id: CozyFolder.magicFolders.ADMINISTRATIVE,
                _type: 'io.cozy.apps'
              });
              expect(result).toEqual(expectedCreatedFolder);

            case 7:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    })));
  });
  describe('getReferencedFolders', function () {
    it('should filter trashed folders',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee5() {
      var referencedFolder, trashFolder, result;
      return _regenerator.default.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              referencedFolder = {
                attributes: {
                  path: '/Reference/Folder'
                }
              };
              trashFolder = {
                attributes: {
                  path: '/.cozy_trash/Old/Reference/Folder'
                }
              };
              cozyClient.stackClient.collection.mockReturnValue({
                findReferencedBy: jest.fn().mockResolvedValue({
                  included: [referencedFolder, trashFolder]
                })
              });
              _context5.next = 5;
              return CozyFolder.getReferencedFolders('ref');

            case 5:
              result = _context5.sent;
              expect(result).toContain(referencedFolder);
              expect(result).not.toContain(trashFolder);

            case 8:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    })));
  });
  describe('ensureFolderWithReference', function () {
    it('should return first folder from returned list',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee6() {
      var existingReferencedFolders, result;
      return _regenerator.default.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              existingReferencedFolders = [{
                attributes: {
                  path: '/Reference/Folder'
                }
              }, {
                attributes: {
                  path: '/Another/Reference'
                }
              }];
              jest.spyOn(CozyFolder, 'getReferencedFolders').mockResolvedValue(existingReferencedFolders);
              _context6.next = 4;
              return CozyFolder.ensureFolderWithReference('/Created/Folder', {
                _id: '31dd57ab0b154ccc8d0d6cba576c0ef0',
                _type: 'io.cozy.examples'
              });

            case 4:
              result = _context6.sent;
              expect(result).toEqual(existingReferencedFolders[0]);

            case 6:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    })));
    it('should create referenced folder',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee7() {
      var createdFolderId, createdFolderInfos, createdFolderResponse, result;
      return _regenerator.default.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              createdFolderId = '6d8cf41a358c4147bf977e34c476131e';
              createdFolderInfos = {
                _id: createdFolderId,
                _type: 'io.cozy.files',
                attributes: {
                  path: '/Created/Folder'
                }
              };
              createdFolderResponse = {
                data: createdFolderInfos
              };
              jest.spyOn(CozyFolder, 'getReferencedFolders').mockResolvedValue([]);
              jest.spyOn(cozyClient, 'collection').mockReturnValue({
                addReferencesTo: jest.fn(),
                ensureDirectoryExists: jest.fn().mockResolvedValue(createdFolderId),
                get: jest.fn().mockResolvedValue(createdFolderResponse)
              });
              _context7.next = 7;
              return CozyFolder.ensureFolderWithReference('/Created/Folder', {
                _id: '31dd57ab0b154ccc8d0d6cba576c0ef0',
                _type: 'io.cozy.examples'
              });

            case 7:
              result = _context7.sent;
              expect(cozyClient.collection().ensureDirectoryExists).toHaveBeenCalledWith('/Created/Folder');
              expect(cozyClient.collection().addReferencesTo).toHaveBeenCalledWith({
                _id: '31dd57ab0b154ccc8d0d6cba576c0ef0',
                _type: 'io.cozy.examples'
              }, [{
                _id: createdFolderId
              }]);
              expect(result).toEqual(createdFolderInfos);

            case 11:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    })));
  });
});
describe('Using copyWithClient', function () {
  var MyCozyFolder;
  beforeEach(function () {
    var newClient = {};
    MyCozyFolder = CozyFolder.copyWithClient(newClient);
  });
  afterEach(function () {
    CozyFolder.cozyClient = null;
  });
  it('should call subfunctions using the same class', function () {
    jest.spyOn(MyCozyFolder, 'getReferencedFolders').mockImplementation(function () {
      return [];
    });
    jest.spyOn(MyCozyFolder, 'createFolderWithReference').mockImplementation();
    MyCozyFolder.ensureMagicFolder(MyCozyFolder.magicFolders.ADMINISTRATIVE, '/Administrative');
    expect(MyCozyFolder.getReferencedFolders).toHaveBeenCalled();
  });
});