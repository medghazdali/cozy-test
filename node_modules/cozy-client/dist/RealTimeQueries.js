"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _react = require("react");

var _useClient = _interopRequireDefault(require("./hooks/useClient"));

var _models = require("./models");

var _dsl = require("./queries/dsl");

var _store = require("./store");

var dispatchChange = function dispatchChange(client, document, mutationDefinitionCreator) {
  var response = {
    data: _models.file.normalize(document)
  };
  var options = {};
  client.dispatch((0, _store.receiveMutationResult)(client.generateId(), response, options, mutationDefinitionCreator(document)));
};

var RealTimeQueries = function RealTimeQueries(_ref) {
  var doctype = _ref.doctype;
  var client = (0, _useClient.default)();
  (0, _react.useEffect)(function () {
    var realtime = client.plugins.realtime;

    var dispatchCreate = function dispatchCreate(document) {
      dispatchChange(client, document, _dsl.Mutations.createDocument);
    };

    var dispatchUpdate = function dispatchUpdate(document) {
      dispatchChange(client, document, _dsl.Mutations.updateDocument);
    };

    var dispatchDelete = function dispatchDelete(document) {
      dispatchChange(client, (0, _objectSpread2.default)({}, document, {
        _deleted: true
      }), _dsl.Mutations.deleteDocument);
    };

    var subscribe =
    /*#__PURE__*/
    function () {
      var _ref2 = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee() {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return realtime.subscribe('created', doctype, dispatchCreate);

              case 2:
                _context.next = 4;
                return realtime.subscribe('updated', doctype, dispatchUpdate);

              case 4:
                _context.next = 6;
                return realtime.subscribe('deleted', doctype, dispatchDelete);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function subscribe() {
        return _ref2.apply(this, arguments);
      };
    }();

    subscribe();
    return function () {
      realtime.unsubscribe('created', doctype, dispatchCreate);
      realtime.unsubscribe('updated', doctype, dispatchUpdate);
      realtime.unsubscribe('deleted', doctype, dispatchDelete);
    };
  }, [client, doctype]);
  return null;
};

var _default = (0, _react.memo)(RealTimeQueries);

exports.default = _default;