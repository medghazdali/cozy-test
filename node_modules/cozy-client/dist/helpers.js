"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateWebLink = exports.dehydrate = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _associations = require("./associations");

var dehydrate = function dehydrate(document) {
  var dehydrated = Object.entries(document).reduce(function (documentArg, _ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];

    var document = documentArg;

    if (!(value instanceof _associations.Association)) {
      document[key] = value;
    } else if (value.dehydrate) {
      document = value.dehydrate(document);
    } else {
      throw new Error("Association on key ".concat(key, " should have a dehydrate method"));
    }

    return document;
  }, {});
  return dehydrated;
};

exports.dehydrate = dehydrate;

var ensureFirstSlash = function ensureFirstSlash(path) {
  if (!path) {
    return '/';
  } else {
    return path.startsWith('/') ? path : '/' + path;
  }
};
/**
 * generateWebLink - Construct a link to a web app
 *
 * This function does not get its cozy url from a CozyClient instance so it can
 * be used to build urls that point to other Cozies than the user's own Cozy.
 * This is useful when pointing to the Cozy of the owner of a shared note for
 * example.
 *
 * @param {object} options               Object of options
 * @param {string}   options.cozyUrl       Base URL of the cozy, eg. cozy.tools or test.mycozy.cloud
 * @param {Array}    options.searchParams  Array of search parameters as [key, value] arrays, eg. ['username', 'bob']
 * @param {string}   options.pathname      Path to a specific part of the app, eg. /public
 * @param {string}   options.hash          Path inside the app, eg. /files/test.jpg
 * @param {string}   options.slug          Slug of the app
 * @param {string}   options.subDomainType Whether the cozy is using flat or nested subdomains. Defaults to flat.
 *
 * @returns {string} Generated URL
 */


var generateWebLink = function generateWebLink(_ref3) {
  var cozyUrl = _ref3.cozyUrl,
      _ref3$searchParams = _ref3.searchParams,
      searchParams = _ref3$searchParams === void 0 ? [] : _ref3$searchParams,
      pathname = _ref3.pathname,
      hash = _ref3.hash,
      slug = _ref3.slug,
      subDomainType = _ref3.subDomainType;
  var url = new URL(cozyUrl);
  url.host = subDomainType === 'nested' ? "".concat(slug, ".").concat(url.host) : url.host.split('.').map(function (x, i) {
    return i === 0 ? x + '-' + slug : x;
  }).join('.');
  url.pathname = pathname;
  url.hash = ensureFirstSlash(hash);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = searchParams[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _step$value = (0, _slicedToArray2.default)(_step.value, 2),
          param = _step$value[0],
          value = _step$value[1];

      url.searchParams.set(param, value);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return url.toString();
};

exports.generateWebLink = generateWebLink;