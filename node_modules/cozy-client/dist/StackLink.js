"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _dsl = require("./queries/dsl");

var _CozyLink2 = _interopRequireDefault(require("./CozyLink"));

var StackLink =
/*#__PURE__*/
function (_CozyLink) {
  (0, _inherits2.default)(StackLink, _CozyLink);

  function StackLink() {
    var _this;

    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        client = _ref.client,
        stackClient = _ref.stackClient;

    (0, _classCallCheck2.default)(this, StackLink);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(StackLink).call(this));

    if (client) {
      console.info('Using options.client is deprecated, prefer options.stackClient');
    }

    _this.stackClient = stackClient || client;
    return _this;
  }

  (0, _createClass2.default)(StackLink, [{
    key: "registerClient",
    value: function registerClient(client) {
      this.stackClient = client.stackClient || client.client;
    }
  }, {
    key: "reset",
    value: function reset() {
      this.stackClient = null;
    }
  }, {
    key: "request",
    value: function request(operation, result, forward) {
      if (operation.mutationType) {
        return this.executeMutation(operation, result, forward);
      }

      return this.executeQuery(operation);
    }
  }, {
    key: "executeQuery",
    value: function executeQuery(query) {
      var doctype = query.doctype,
          selector = query.selector,
          id = query.id,
          ids = query.ids,
          referenced = query.referenced,
          options = (0, _objectWithoutProperties2.default)(query, ["doctype", "selector", "id", "ids", "referenced"]);

      if (!doctype) {
        console.warn('Bad query', query);
        throw new Error('No doctype found in a query definition');
      }

      var collection = this.stackClient.collection(doctype);

      if (id) {
        return collection.get(id);
      }

      if (ids) {
        return collection.getAll(ids);
      }

      if (referenced) {
        return collection.findReferencedBy(referenced, options);
      }

      return !selector && !options.sort ? collection.all(options) : collection.find(selector, options);
    }
  }, {
    key: "executeMutation",
    value: function executeMutation(mutation, result, forward) {
      var mutationType = mutation.mutationType,
          props = (0, _objectWithoutProperties2.default)(mutation, ["mutationType"]);

      switch (mutationType) {
        case _dsl.MutationTypes.CREATE_DOCUMENT:
          return this.stackClient.collection(props.document._type).create(props.document);

        case _dsl.MutationTypes.UPDATE_DOCUMENT:
          return this.stackClient.collection(props.document._type).update(props.document);

        case _dsl.MutationTypes.DELETE_DOCUMENT:
          return this.stackClient.collection(props.document._type).destroy(props.document);

        case _dsl.MutationTypes.ADD_REFERENCES_TO:
          return this.stackClient.collection(props.referencedDocuments[0]._type).addReferencesTo(props.document, props.referencedDocuments);

        case _dsl.MutationTypes.REMOVE_REFERENCES_TO:
          return this.stackClient.collection(props.referencedDocuments[0]._type).removeReferencesTo(props.document, props.referencedDocuments);

        case _dsl.MutationTypes.ADD_REFERENCED_BY:
          if (props.document._type === 'io.cozy.files') {
            return this.stackClient.collection('io.cozy.files').addReferencedBy(props.document, props.referencedDocuments);
          } else {
            throw new Error('The document type should be io.cozy.files');
          }

        case _dsl.MutationTypes.REMOVE_REFERENCED_BY:
          if (props.document._type === 'io.cozy.files') {
            return this.stackClient.collection('io.cozy.files').removeReferencedBy(props.document, props.referencedDocuments);
          } else {
            throw new Error('The document type should be io.cozy.files');
          }

        case _dsl.MutationTypes.UPLOAD_FILE:
          return this.stackClient.collection('io.cozy.files').upload(props.file, props.dirPath);

        default:
          return forward(mutation, result);
      }
    }
  }]);
  return StackLink;
}(_CozyLink2.default);

exports.default = StackLink;