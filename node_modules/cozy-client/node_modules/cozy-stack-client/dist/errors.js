"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FetchError = exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));

var EXPIRED_TOKEN = /Expired token/;
var CLIENT_NOT_FOUND = /Client not found/;
var INVALID_TOKEN = /Invalid JWT token/;
var _default = {
  EXPIRED_TOKEN: EXPIRED_TOKEN,
  CLIENT_NOT_FOUND: CLIENT_NOT_FOUND,
  INVALID_TOKEN: INVALID_TOKEN
};
exports.default = _default;

var FetchError =
/*#__PURE__*/
function (_Error) {
  (0, _inherits2.default)(FetchError, _Error);

  function FetchError(response, reason) {
    var _this;

    (0, _classCallCheck2.default)(this, FetchError);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(FetchError).call(this));

    if (Error.captureStackTrace) {
      Error.captureStackTrace((0, _assertThisInitialized2.default)(_this), _this.constructor);
    } // WARN We have to hardcode this because babel doesn't play nice when extending Error


    _this.name = 'FetchError';
    _this.response = response;
    _this.url = response.url;
    _this.status = response.status;
    _this.reason = reason;
    Object.defineProperty((0, _assertThisInitialized2.default)(_this), 'message', {
      value: reason.message || (typeof reason === 'string' ? reason : JSON.stringify(reason))
    });
    return _this;
  }

  return FetchError;
}((0, _wrapNativeSuper2.default)(Error));

exports.FetchError = FetchError;