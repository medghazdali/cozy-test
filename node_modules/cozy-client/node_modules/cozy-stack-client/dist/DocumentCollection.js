"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeDoc = normalizeDoc;
exports.normalizeDoctype = exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _utils = require("./utils");

var _uniq = _interopRequireDefault(require("lodash/uniq"));

var _transform = _interopRequireDefault(require("lodash/transform"));

var _head = _interopRequireDefault(require("lodash/head"));

var _omit = _interopRequireDefault(require("lodash/omit"));

var _startsWith = _interopRequireDefault(require("lodash/startsWith"));

var _qs = _interopRequireDefault(require("qs"));

var _Collection = _interopRequireWildcard(require("./Collection"));

var querystring = _interopRequireWildcard(require("./querystring"));

var _errors = require("./errors");

function _templateObject7() {
  var data = (0, _taggedTemplateLiteral2.default)(["/data/", "/_index"]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = (0, _taggedTemplateLiteral2.default)(["/data/", "/", "?rev=", ""]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = (0, _taggedTemplateLiteral2.default)(["/data/", "/", ""]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = (0, _taggedTemplateLiteral2.default)(["/data/", "/", ""]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = (0, _taggedTemplateLiteral2.default)(["/data/", "/_all_docs?include_docs=true"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _taggedTemplateLiteral2.default)(["/data/", "/_find"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2.default)(["/data/", "/", ""]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var DATABASE_DOES_NOT_EXIST = 'Database does not exist.';
/**
 * Normalize a document, adding its doctype if needed
 *
 * @param {object} doc - Document to normalize
 * @param {string} doctype - Document doctype
 * @returns {object} normalized document
 * @private
 */

function normalizeDoc() {
  var doc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var doctype = arguments.length > 1 ? arguments[1] : undefined;
  var id = doc._id || doc.id;
  return (0, _objectSpread2.default)({
    id: id,
    _id: id,
    _type: doctype
  }, doc);
}

var prepareForDeletion = function prepareForDeletion(x) {
  return Object.assign({}, (0, _omit.default)(x, '_type'), {
    _deleted: true
  });
};
/**
 * Abstracts a collection of documents of the same doctype, providing CRUD methods and other helpers.
 */


var DocumentCollection =
/*#__PURE__*/
function () {
  function DocumentCollection(doctype, stackClient) {
    (0, _classCallCheck2.default)(this, DocumentCollection);
    this.doctype = doctype;
    this.stackClient = stackClient;
    this.indexes = {};
    this.endpoint = "/data/".concat(this.doctype, "/");
  }
  /**
   * Provides a callback for `Collection.get`
   *
   * @private
   * @param {string} doctype - Document doctype
   * @returns {Function} (data, response) => normalizedDocument
   *                                        using `normalizeDoc`
   */


  (0, _createClass2.default)(DocumentCollection, [{
    key: "all",

    /**
     * Lists all documents of the collection, without filters.
     *
     * The returned documents are paginated by the stack.
     *
     * @param  {{limit, skip, bookmark, keys}} options The fetch options: pagination & fetch of specific docs.
     * @returns {{data, meta, skip, bookmark, next}} The JSON API conformant response.
     * @throws {FetchError}
     */
    value: function () {
      var _all = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee() {
        var _this = this;

        var options,
            _options$limit,
            limit,
            _options$skip,
            skip,
            bookmark,
            keys,
            isUsingAllDocsRoute,
            route,
            url,
            params,
            path,
            resp,
            data,
            next,
            _args = arguments;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
                _options$limit = options.limit, limit = _options$limit === void 0 ? 100 : _options$limit, _options$skip = options.skip, skip = _options$skip === void 0 ? 0 : _options$skip, bookmark = options.bookmark, keys = options.keys; // If the limit is intentionnally null, we need to use _all_docs, since _normal_docs uses _find and have a hard limit of 100

                isUsingAllDocsRoute = !!keys || limit === null;
                route = isUsingAllDocsRoute ? '_all_docs' : '_normal_docs';
                url = (0, _utils.uri)(_templateObject(), this.doctype, route);
                params = {
                  include_docs: true,
                  limit: limit,
                  skip: skip,
                  keys: keys,
                  bookmark: bookmark
                };
                path = querystring.buildURL(url, params); // If no document of this doctype exist, this route will return a 404,
                // so we need to try/catch and return an empty response object in case of a 404

                _context.prev = 7;
                _context.next = 10;
                return this.stackClient.fetchJSON('GET', path);

              case 10:
                resp = _context.sent;
                _context.next = 16;
                break;

              case 13:
                _context.prev = 13;
                _context.t0 = _context["catch"](7);
                return _context.abrupt("return", (0, _Collection.dontThrowNotFoundError)(_context.t0));

              case 16:
                /* If using `all_docs` we need to filter our design documents and check if
                the document is not null. If we use `normal_doc` we can't have any design doc
                 */
                if (isUsingAllDocsRoute) {
                  data = resp.rows.filter(function (doc) {
                    return doc && doc.doc !== null && !doc.error && !(0, _startsWith.default)(doc.id, '_design');
                  }).map(function (row) {
                    return normalizeDoc(row.doc, _this.doctype);
                  });
                } else {
                  data = resp.rows.map(function (row) {
                    return normalizeDoc(row, _this.doctype);
                  });
                } // The presence of a bookmark doesnâ€™t guarantee that there are more results.
                // See https://docs.couchdb.org/en/2.2.0/api/database/find.html#pagination


                next = bookmark ? resp.rows.length >= limit : skip + resp.rows.length < resp.total_rows;
                return _context.abrupt("return", {
                  data: data,
                  meta: {
                    count: isUsingAllDocsRoute ? data.length : resp.total_rows
                  },
                  skip: skip,
                  bookmark: resp.bookmark,
                  next: next
                });

              case 19:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[7, 13]]);
      }));

      return function all() {
        return _all.apply(this, arguments);
      };
    }()
    /**
     * Returns a filtered list of documents using a Mango selector.
     *
     * The returned documents are paginated by the stack.
     *
     * @param  {object} selector The Mango selector.
     * @param  {{sort, fields, limit, skip, bookmark, indexId}} options The query options.
     * @returns {{data, skip, bookmark, next}} The JSON API conformant response.
     * @throws {FetchError}
     */

  }, {
    key: "find",
    value: function () {
      var _find = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee2(selector) {
        var _this2 = this;

        var options,
            _options$skip2,
            skip,
            resp,
            _args2 = arguments;

        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
                _options$skip2 = options.skip, skip = _options$skip2 === void 0 ? 0 : _options$skip2;
                _context2.prev = 2;
                _context2.t0 = this.stackClient;
                _context2.t1 = (0, _utils.uri)(_templateObject2(), this.doctype);
                _context2.next = 7;
                return this.toMangoOptions(selector, options);

              case 7:
                _context2.t2 = _context2.sent;
                _context2.next = 10;
                return _context2.t0.fetchJSON.call(_context2.t0, 'POST', _context2.t1, _context2.t2);

              case 10:
                resp = _context2.sent;
                _context2.next = 16;
                break;

              case 13:
                _context2.prev = 13;
                _context2.t3 = _context2["catch"](2);
                return _context2.abrupt("return", (0, _Collection.dontThrowNotFoundError)(_context2.t3));

              case 16:
                return _context2.abrupt("return", {
                  data: resp.docs.map(function (doc) {
                    return normalizeDoc(doc, _this2.doctype);
                  }),
                  next: resp.next,
                  skip: skip,
                  bookmark: resp.bookmark
                });

              case 17:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[2, 13]]);
      }));

      return function find(_x) {
        return _find.apply(this, arguments);
      };
    }()
    /**
     * Get a document by id
     *
     * @param  {string} id The document id.
     * @returns {object}  JsonAPI response containing normalized document as data attribute
     */

  }, {
    key: "get",
    value: function () {
      var _get = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee3(id) {
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", _Collection.default.get(this.stackClient, "".concat(this.endpoint).concat(encodeURIComponent(id)), {
                  normalize: this.constructor.normalizeDoctype(this.doctype)
                }));

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function get(_x2) {
        return _get.apply(this, arguments);
      };
    }()
    /**
     * Get many documents by id
     */

  }, {
    key: "getAll",
    value: function () {
      var _getAll = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee4(ids) {
        var _this3 = this;

        var resp, rows;
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.prev = 0;
                _context4.next = 3;
                return this.stackClient.fetchJSON('POST', (0, _utils.uri)(_templateObject3(), this.doctype), {
                  keys: ids
                });

              case 3:
                resp = _context4.sent;
                _context4.next = 9;
                break;

              case 6:
                _context4.prev = 6;
                _context4.t0 = _context4["catch"](0);
                return _context4.abrupt("return", (0, _Collection.dontThrowNotFoundError)(_context4.t0));

              case 9:
                rows = resp.rows.filter(function (row) {
                  return row.doc;
                });
                return _context4.abrupt("return", {
                  data: rows.map(function (row) {
                    return normalizeDoc(row.doc, _this3.doctype);
                  }),
                  meta: {
                    count: rows.length
                  }
                });

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[0, 6]]);
      }));

      return function getAll(_x3) {
        return _getAll.apply(this, arguments);
      };
    }()
    /**
     * Creates a document
     *
     * @param {object} doc - Document to create. Optional: you can force the id with the _id attribute
     */

  }, {
    key: "create",
    value: function () {
      var _create = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee5(_ref) {
        var _id, _type, document, hasFixedId, method, endpoint, resp;

        return _regenerator.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _id = _ref._id, _type = _ref._type, document = (0, _objectWithoutProperties2.default)(_ref, ["_id", "_type"]);
                // In case of a fixed id, let's use the dedicated creation endpoint
                // https://github.com/cozy/cozy-stack/blob/master/docs/data-system.md#create-a-document-with-a-fixed-id
                hasFixedId = !!_id;
                method = hasFixedId ? 'PUT' : 'POST';
                endpoint = (0, _utils.uri)(_templateObject4(), this.doctype, hasFixedId ? _id : '');
                _context5.next = 6;
                return this.stackClient.fetchJSON(method, endpoint, document);

              case 6:
                resp = _context5.sent;
                return _context5.abrupt("return", {
                  data: normalizeDoc(resp.data, this.doctype)
                });

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function create(_x4) {
        return _create.apply(this, arguments);
      };
    }()
    /**
     * Updates a document
     *
     * @param {object} document - Document to update. Do not forget the _id attribute
     */

  }, {
    key: "update",
    value: function () {
      var _update = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee6(document) {
        var resp;
        return _regenerator.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.stackClient.fetchJSON('PUT', (0, _utils.uri)(_templateObject5(), this.doctype, document._id), document);

              case 2:
                resp = _context6.sent;
                return _context6.abrupt("return", {
                  data: normalizeDoc(resp.data, this.doctype)
                });

              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function update(_x5) {
        return _update.apply(this, arguments);
      };
    }()
    /**
     * Destroys a document
     *
     * @param {object} doc - Document to destroy. Do not forget _id and _rev attributes
     */

  }, {
    key: "destroy",
    value: function () {
      var _destroy = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee7(_ref2) {
        var _id, _rev, document, resp;

        return _regenerator.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _id = _ref2._id, _rev = _ref2._rev, document = (0, _objectWithoutProperties2.default)(_ref2, ["_id", "_rev"]);
                _context7.next = 3;
                return this.stackClient.fetchJSON('DELETE', (0, _utils.uri)(_templateObject6(), this.doctype, _id, _rev));

              case 3:
                resp = _context7.sent;
                return _context7.abrupt("return", {
                  data: normalizeDoc((0, _objectSpread2.default)({}, document, {
                    _id: _id,
                    _rev: resp.rev,
                    _deleted: true
                  }), this.doctype)
                });

              case 5:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function destroy(_x6) {
        return _destroy.apply(this, arguments);
      };
    }()
    /**
     * Updates several documents in one batch
     *
     * @param  {Document[]} docs Documents to be updated
     */

  }, {
    key: "updateAll",
    value: function () {
      var _updateAll = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee8(docs) {
        var stackClient, update, firstDoc, resp;
        return _regenerator.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                stackClient = this.stackClient;

                if (!(!docs || !docs.length)) {
                  _context8.next = 3;
                  break;
                }

                return _context8.abrupt("return", Promise.resolve([]));

              case 3:
                _context8.prev = 3;
                _context8.next = 6;
                return stackClient.fetchJSON('POST', "/data/".concat(this.doctype, "/_bulk_docs"), {
                  docs: docs
                });

              case 6:
                update = _context8.sent;
                return _context8.abrupt("return", update);

              case 10:
                _context8.prev = 10;
                _context8.t0 = _context8["catch"](3);

                if (!(_context8.t0.reason && _context8.t0.reason.reason && _context8.t0.reason.reason === DATABASE_DOES_NOT_EXIST)) {
                  _context8.next = 23;
                  break;
                }

                _context8.next = 15;
                return this.create(docs[0]);

              case 15:
                firstDoc = _context8.sent;
                _context8.next = 18;
                return this.updateAll(docs.slice(1));

              case 18:
                resp = _context8.sent;
                resp.unshift({
                  ok: true,
                  id: firstDoc._id,
                  rev: firstDoc._rev
                });
                return _context8.abrupt("return", resp);

              case 23:
                throw _context8.t0;

              case 24:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this, [[3, 10]]);
      }));

      return function updateAll(_x7) {
        return _updateAll.apply(this, arguments);
      };
    }()
    /**
     * Deletes several documents in one batch
     *
     * @param  {Document[]} docs - Documents to delete
     */

  }, {
    key: "destroyAll",
    value: function destroyAll(docs) {
      return this.updateAll(docs.map(prepareForDeletion));
    }
  }, {
    key: "toMangoOptions",
    value: function () {
      var _toMangoOptions = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee9(selector) {
        var options,
            sort,
            indexedFields,
            fields,
            _options$skip3,
            skip,
            limit,
            bookmark,
            indexId,
            sortOrders,
            sortOrder,
            _iteratorNormalCompletion,
            _didIteratorError,
            _iteratorError,
            _loop,
            _iterator,
            _step,
            opts,
            _args9 = arguments;

        return _regenerator.default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};
                sort = options.sort, indexedFields = options.indexedFields;
                fields = options.fields, _options$skip3 = options.skip, skip = _options$skip3 === void 0 ? 0 : _options$skip3, limit = options.limit, bookmark = options.bookmark;

                if (sort && !Array.isArray(sort)) {
                  console.warn('Passing an object to the "sort" is deprecated, please use an array instead.');
                  sort = (0, _transform.default)(sort, function (acc, order, field) {
                    return acc.push((0, _defineProperty2.default)({}, field, order));
                  }, []);
                }

                indexedFields = indexedFields ? indexedFields : this.getIndexFields({
                  sort: sort,
                  selector: selector
                });
                _context9.t0 = options.indexId;

                if (_context9.t0) {
                  _context9.next = 10;
                  break;
                }

                _context9.next = 9;
                return this.getIndexId(indexedFields);

              case 9:
                _context9.t0 = _context9.sent;

              case 10:
                indexId = _context9.t0;

                if (!sort) {
                  _context9.next = 36;
                  break;
                }

                sortOrders = (0, _uniq.default)(sort.map(function (sortOption) {
                  return (0, _head.default)(Object.values(sortOption));
                }));

                if (!(sortOrders.length > 1)) {
                  _context9.next = 15;
                  break;
                }

                throw new Error('Mango sort can only use a single order (asc or desc).');

              case 15:
                sortOrder = sortOrders.length > 0 ? (0, _head.default)(sortOrders) : 'asc';
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context9.prev = 19;

                _loop = function _loop() {
                  var field = _step.value;
                  if (!sort.find(function (sortOption) {
                    return (0, _head.default)(Object.keys(sortOption)) === field;
                  })) sort.push((0, _defineProperty2.default)({}, field, sortOrder));
                };

                for (_iterator = indexedFields[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  _loop();
                }

                _context9.next = 28;
                break;

              case 24:
                _context9.prev = 24;
                _context9.t1 = _context9["catch"](19);
                _didIteratorError = true;
                _iteratorError = _context9.t1;

              case 28:
                _context9.prev = 28;
                _context9.prev = 29;

                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }

              case 31:
                _context9.prev = 31;

                if (!_didIteratorError) {
                  _context9.next = 34;
                  break;
                }

                throw _iteratorError;

              case 34:
                return _context9.finish(31);

              case 35:
                return _context9.finish(28);

              case 36:
                opts = {
                  selector: selector,
                  use_index: indexId,
                  // TODO: type and class should not be necessary, it's just a temp fix for a stack bug
                  fields: fields ? [].concat((0, _toConsumableArray2.default)(fields), ['_id', '_type', 'class']) : undefined,
                  limit: limit,
                  skip: skip,
                  bookmark: options.bookmark || bookmark,
                  sort: sort
                };
                return _context9.abrupt("return", opts);

              case 38:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this, [[19, 24, 28, 36], [29,, 31, 35]]);
      }));

      return function toMangoOptions(_x8) {
        return _toMangoOptions.apply(this, arguments);
      };
    }()
  }, {
    key: "checkUniquenessOf",
    value: function () {
      var _checkUniquenessOf = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee10(property, value) {
        var indexId, existingDocs;
        return _regenerator.default.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this.getUniqueIndexId(property);

              case 2:
                indexId = _context10.sent;
                _context10.next = 5;
                return this.find((0, _defineProperty2.default)({}, property, value), {
                  indexId: indexId,
                  fields: ['_id']
                });

              case 5:
                existingDocs = _context10.sent;
                return _context10.abrupt("return", existingDocs.data.length === 0);

              case 7:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function checkUniquenessOf(_x9, _x10) {
        return _checkUniquenessOf.apply(this, arguments);
      };
    }()
  }, {
    key: "getUniqueIndexId",
    value: function getUniqueIndexId(property) {
      return this.getIndexId([property], "".concat(this.doctype, "/").concat(property));
    }
  }, {
    key: "getIndexId",
    value: function () {
      var _getIndexId = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee11(fields) {
        var indexName,
            _args11 = arguments;
        return _regenerator.default.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                indexName = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : this.getIndexNameFromFields(fields);

                if (this.indexes[indexName]) {
                  _context11.next = 5;
                  break;
                }

                _context11.next = 4;
                return this.createIndex(fields);

              case 4:
                this.indexes[indexName] = _context11.sent;

              case 5:
                return _context11.abrupt("return", this.indexes[indexName].id);

              case 6:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function getIndexId(_x11) {
        return _getIndexId.apply(this, arguments);
      };
    }()
  }, {
    key: "createIndex",
    value: function () {
      var _createIndex = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee12(fields) {
        var indexDef, resp, indexResp, selector, options;
        return _regenerator.default.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                indexDef = {
                  index: {
                    fields: fields
                  }
                };
                _context12.next = 3;
                return this.stackClient.fetchJSON('POST', (0, _utils.uri)(_templateObject7(), this.doctype), indexDef);

              case 3:
                resp = _context12.sent;
                indexResp = {
                  id: resp.id,
                  fields: fields
                };

                if (!(resp.result === 'exists')) {
                  _context12.next = 7;
                  break;
                }

                return _context12.abrupt("return", indexResp);

              case 7:
                // indexes might not be usable right after being created; so we delay the resolving until they are
                selector = (0, _defineProperty2.default)({}, fields[0], {
                  $gt: null
                });
                options = {
                  indexId: indexResp.id
                };
                _context12.next = 11;
                return (0, _utils.attempt)(this.find(selector, options));

              case 11:
                if (!_context12.sent) {
                  _context12.next = 13;
                  break;
                }

                return _context12.abrupt("return", indexResp);

              case 13:
                _context12.next = 15;
                return (0, _utils.sleep)(1000);

              case 15:
                _context12.next = 17;
                return (0, _utils.attempt)(this.find(selector, options));

              case 17:
                if (!_context12.sent) {
                  _context12.next = 19;
                  break;
                }

                return _context12.abrupt("return", indexResp);

              case 19:
                _context12.next = 21;
                return (0, _utils.sleep)(500);

              case 21:
                return _context12.abrupt("return", indexResp);

              case 22:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function createIndex(_x12) {
        return _createIndex.apply(this, arguments);
      };
    }()
  }, {
    key: "getIndexNameFromFields",
    value: function getIndexNameFromFields(fields) {
      return "by_".concat(fields.join('_and_'));
    }
    /**
     * Compute fields that should be indexed for a mango
     * query to work
     *
     * @private
     * @param  {object} options - Mango query options
     * @returns {Array} - Fields to index
     */

  }, {
    key: "getIndexFields",
    value: function getIndexFields(_ref3) {
      var selector = _ref3.selector,
          _ref3$sort = _ref3.sort,
          sort = _ref3$sort === void 0 ? [] : _ref3$sort;
      return Array.from(new Set([].concat((0, _toConsumableArray2.default)(sort.map(function (sortOption) {
        return (0, _head.default)(Object.keys(sortOption));
      })), (0, _toConsumableArray2.default)(selector ? Object.keys(selector) : []))));
    }
    /**
     * Use Couch _changes API
     *
     * @param  {object} couchOptions Couch options for changes https://kutt.it/5r7MNQ
     * @param  {object} options      { includeDesign: false, includeDeleted: false }
     */

  }, {
    key: "fetchChanges",
    value: function () {
      var _fetchChanges = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee13() {
        var couchOptions,
            options,
            haveDocsIds,
            urlParams,
            method,
            endpoint,
            params,
            result,
            newLastSeq,
            docs,
            _args13 = arguments;
        return _regenerator.default.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                couchOptions = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : {};
                options = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : {};
                haveDocsIds = couchOptions.doc_ids && couchOptions.doc_ids.length > 0;
                urlParams = '';

                if (typeof couchOptions !== 'object') {
                  urlParams = "?include_docs=true&since=".concat(couchOptions);
                  console.warn("fetchChanges use couchOptions as Object not a string, since is deprecated, please use fetchChanges({include_docs: true, since: \"".concat(couchOptions, "\"})."));
                } else if (Object.keys(couchOptions).length > 0) {
                  urlParams = "?".concat([_qs.default.stringify((0, _omit.default)(couchOptions, 'doc_ids')), haveDocsIds && couchOptions.filter === undefined ? 'filter=_doc_ids' : undefined].filter(Boolean).join('&'));
                }

                method = haveDocsIds ? 'POST' : 'GET';
                endpoint = "/data/".concat(this.doctype, "/_changes").concat(urlParams);
                params = haveDocsIds ? {
                  doc_ids: couchOptions.doc_ids
                } : undefined;
                _context13.next = 10;
                return this.stackClient.fetchJSON(method, endpoint, params);

              case 10:
                result = _context13.sent;
                newLastSeq = result.last_seq;
                docs = result.results.map(function (x) {
                  return x.doc;
                }).filter(Boolean);

                if (!options.includeDesign) {
                  docs = docs.filter(function (doc) {
                    return doc._id.indexOf('_design') !== 0;
                  });
                }

                if (!options.includeDeleted) {
                  docs = docs.filter(function (doc) {
                    return !doc._deleted;
                  });
                }

                return _context13.abrupt("return", {
                  newLastSeq: newLastSeq,
                  documents: docs
                });

              case 16:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function fetchChanges() {
        return _fetchChanges.apply(this, arguments);
      };
    }()
  }], [{
    key: "normalizeDoctype",
    value: function normalizeDoctype(doctype) {
      return this.normalizeDoctypeRawApi(doctype);
    }
    /**
     * `normalizeDoctype` for api end points returning json api responses
     *
     * @private
     * @param {string} doctype - Document doctype
     * @returns {Function} (data, response) => normalizedDocument
     *                                        using `normalizeDoc`
     */

  }, {
    key: "normalizeDoctypeJsonApi",
    value: function normalizeDoctypeJsonApi(doctype) {
      return function (data, response) {
        // use the "data" attribute of the response
        return normalizeDoc(data, doctype);
      };
    }
    /**
     * `normalizeDoctype` for api end points returning raw documents
     *
     * @private
     * @param {string} doctype - Document doctype
     * @returns {Function} (data, response) => normalizedDocument
     *                                        using `normalizeDoc`
     */

  }, {
    key: "normalizeDoctypeRawApi",
    value: function normalizeDoctypeRawApi(doctype) {
      return function (data, response) {
        // use the response directly
        return normalizeDoc(response, doctype);
      };
    }
  }]);
  return DocumentCollection;
}();

var _default = DocumentCollection;
exports.default = _default;
var normalizeDoctype = DocumentCollection.normalizeDoctype;
exports.normalizeDoctype = normalizeDoctype;