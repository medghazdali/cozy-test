"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.isDirectory = exports.isFile = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _lite = _interopRequireDefault(require("mime/lite"));

var _has = _interopRequireDefault(require("lodash/has"));

var _get = _interopRequireDefault(require("lodash/get"));

var _pick = _interopRequireDefault(require("lodash/pick"));

var _DocumentCollection2 = _interopRequireWildcard(require("./DocumentCollection"));

var _utils = require("./utils");

var querystring = _interopRequireWildcard(require("./querystring"));

var _errors = require("./errors");

function _templateObject19() {
  var data = (0, _taggedTemplateLiteral2.default)(["/files/", "/versions"]);

  _templateObject19 = function _templateObject19() {
    return data;
  };

  return data;
}

function _templateObject18() {
  var data = (0, _taggedTemplateLiteral2.default)(["/files/upload/metadata"]);

  _templateObject18 = function _templateObject18() {
    return data;
  };

  return data;
}

function _templateObject17() {
  var data = (0, _taggedTemplateLiteral2.default)(["/files/", ""]);

  _templateObject17 = function _templateObject17() {
    return data;
  };

  return data;
}

function _templateObject16() {
  var data = (0, _taggedTemplateLiteral2.default)(["/files/", "?Name=", "&Type=directory"]);

  _templateObject16 = function _templateObject16() {
    return data;
  };

  return data;
}

function _templateObject15() {
  var data = (0, _taggedTemplateLiteral2.default)(["/files/metadata?Path=", ""]);

  _templateObject15 = function _templateObject15() {
    return data;
  };

  return data;
}

function _templateObject14() {
  var data = (0, _taggedTemplateLiteral2.default)(["/files/", ""]);

  _templateObject14 = function _templateObject14() {
    return data;
  };

  return data;
}

function _templateObject13() {
  var data = (0, _taggedTemplateLiteral2.default)(["/files/downloads?Path=", ""]);

  _templateObject13 = function _templateObject13() {
    return data;
  };

  return data;
}

function _templateObject12() {
  var data = (0, _taggedTemplateLiteral2.default)(["/files/downloads?VersionId=", "&Filename=", ""]);

  _templateObject12 = function _templateObject12() {
    return data;
  };

  return data;
}

function _templateObject11() {
  var data = (0, _taggedTemplateLiteral2.default)(["/files/downloads?Id=", "&Filename=", ""]);

  _templateObject11 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10() {
  var data = (0, _taggedTemplateLiteral2.default)(["/files/", "?Name=", "&Type=file&Executable=", ""]);

  _templateObject10 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9() {
  var data = (0, _taggedTemplateLiteral2.default)(["/files/", "?Name=", "&Type=file&Executable=", "&MetadataID=", ""]);

  _templateObject9 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8() {
  var data = (0, _taggedTemplateLiteral2.default)(["/files/", ""]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = (0, _taggedTemplateLiteral2.default)(["/files/trash/", ""]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = (0, _taggedTemplateLiteral2.default)(["/files/", ""]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = (0, _taggedTemplateLiteral2.default)(["/data/", "/", "/relationships/references"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = (0, _taggedTemplateLiteral2.default)(["/data/", "/", "/relationships/references"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = (0, _taggedTemplateLiteral2.default)(["/files/", "/relationships/referenced_by"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _taggedTemplateLiteral2.default)(["/files/", "/relationships/referenced_by"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2.default)(["/data/", "/", "/relationships/references"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var ROOT_DIR_ID = 'io.cozy.files.root-dir';
var CONTENT_TYPE_OCTET_STREAM = 'application/octet-stream';

var normalizeFile = function normalizeFile(file) {
  return (0, _objectSpread2.default)({}, (0, _DocumentCollection2.normalizeDoc)(file, 'io.cozy.files'), file.attributes);
};

var sanitizeFileName = function sanitizeFileName(name) {
  return name && name.trim();
};

var getFileTypeFromName = function getFileTypeFromName(name) {
  return _lite.default.getType(name) || CONTENT_TYPE_OCTET_STREAM;
};

var isFile = function isFile(_ref) {
  var _type = _ref._type,
      type = _ref.type;
  return _type === 'io.cozy.files' || type === 'directory' || type === 'file';
};

exports.isFile = isFile;

var isDirectory = function isDirectory(_ref2) {
  var type = _ref2.type;
  return type === 'directory';
};

exports.isDirectory = isDirectory;

var raceWithCondition = function raceWithCondition(promises, predicate) {
  return new Promise(function (resolve) {
    promises.forEach(function (p) {
      return p.then(function (res) {
        if (predicate(res)) {
          resolve(true);
        }
      });
    });
    Promise.all(promises).then(function () {
      return resolve(false);
    });
  });
};

var dirName = function dirName(path) {
  var lastIndex = path.lastIndexOf('/');
  return path.substring(0, lastIndex);
};
/**
 * Implements `DocumentCollection` API along with specific methods for
 * `io.cozy.files`.
 *
 * Files are a special type of documents and are handled differently by the stack:
 * special routes are to be used, and there is a notion of referenced files, aka
 * files associated to a specific document
 */


var FileCollection =
/*#__PURE__*/
function (_DocumentCollection) {
  (0, _inherits2.default)(FileCollection, _DocumentCollection);

  function FileCollection(doctype, stackClient) {
    var _this;

    (0, _classCallCheck2.default)(this, FileCollection);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(FileCollection).call(this, doctype, stackClient));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "extractResponseLinkRelated", function (res) {
      var href = res.links && res.links.related;
      if (!href) throw new Error('No related link in server response');
      return _this.stackClient.fullpath(href);
    });
    _this.specialDirectories = {};
    return _this;
  }
  /**
   * Fetches the file's data
   *
   * @param {string} id File id
   * @returns {{data, included}} Information about the file or folder and it's descendents
   */


  (0, _createClass2.default)(FileCollection, [{
    key: "get",
    value: function get(id) {
      return this.statById(id);
    }
    /**
     * Returns a filtered list of documents using a Mango selector.
     *
     * The returned documents are paginated by the stack.
     *
     * @param  {object} selector The Mango selector.
     * @param  {{sort, fields, limit, skip, indexId, bookmark}} options The query options.
     * @returns {{data, meta, skip, next, bookmark}} The JSON API conformant response.
     * @throws {FetchError}
     */

  }, {
    key: "find",
    value: function () {
      var _find = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(selector) {
        var options,
            _options$skip,
            skip,
            resp,
            nextLink,
            nextLinkURL,
            nextBookmark,
            _args = arguments;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                _options$skip = options.skip, skip = _options$skip === void 0 ? 0 : _options$skip;
                _context.t0 = this.stackClient;
                _context.next = 5;
                return this.toMangoOptions(selector, options);

              case 5:
                _context.t1 = _context.sent;
                _context.next = 8;
                return _context.t0.fetchJSON.call(_context.t0, 'POST', '/files/_find', _context.t1);

              case 8:
                resp = _context.sent;
                nextLink = (0, _get.default)(resp, 'links.next', '');
                nextLinkURL = new URL("".concat(this.stackClient.uri).concat(nextLink));
                nextBookmark = nextLinkURL.searchParams.get('page[cursor]');
                return _context.abrupt("return", {
                  data: resp.data.map(function (f) {
                    return normalizeFile(f);
                  }),
                  meta: resp.meta,
                  next: resp.meta.count > skip + resp.data.length,
                  skip: skip,
                  bookmark: nextBookmark || undefined
                });

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function find(_x) {
        return _find.apply(this, arguments);
      };
    }()
    /**
     * async findReferencedBy - Returns the list of files referenced by a document — see https://docs.cozy.io/en/cozy-stack/references-docs-in-vfs/
     *
     * @param  {object} document        A JSON representing a document, with at least a `_type` and `_id` field.
     * @param  {object} options         Additional options
     * @param  {number} options.skip    For skip-based pagination, the number of referenced files to skip.
     * @param  {number} options.limit   For pagination, the number of results to return.
     * @param  {object} options.cursor  For cursor-based pagination, the index cursor.
     * @returns {object}                The JSON API conformant response.
     */

  }, {
    key: "findReferencedBy",
    value: function () {
      var _findReferencedBy = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee2(document) {
        var _ref3,
            _ref3$skip,
            skip,
            limit,
            cursor,
            params,
            url,
            path,
            resp,
            _args2 = arguments;

        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _ref3 = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {}, _ref3$skip = _ref3.skip, skip = _ref3$skip === void 0 ? 0 : _ref3$skip, limit = _ref3.limit, cursor = _ref3.cursor;
                params = {
                  include: 'files',
                  'page[limit]': limit,
                  'page[cursor]': cursor,
                  sort: 'datetime'
                };
                url = (0, _utils.uri)(_templateObject(), document._type, document._id);
                path = querystring.buildURL(url, params);
                _context2.next = 6;
                return this.stackClient.fetchJSON('GET', path);

              case 6:
                resp = _context2.sent;
                return _context2.abrupt("return", {
                  data: resp.data.map(function (f) {
                    return normalizeFile(f);
                  }),
                  included: resp.included ? resp.included.map(function (f) {
                    return normalizeFile(f);
                  }) : [],
                  next: (0, _has.default)(resp, 'links.next'),
                  meta: resp.meta,
                  skip: skip
                });

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function findReferencedBy(_x2) {
        return _findReferencedBy.apply(this, arguments);
      };
    }()
    /**
     *  Add referenced_by documents to a file — see https://docs.cozy.io/en/cozy-stack/references-docs-in-vfs/#post-filesfile-idrelationshipsreferenced_by
     *
     *  For example, to have an album referenced by a file:
     * ```
     * addReferencedBy({_id: 123, _type: "io.cozy.files", name: "cozy.jpg"}, [{_id: 456, _type: "io.cozy.photos.albums", name: "Happy Cloud"}])
     * ```
     *
     * @param  {FileDocument} document        A JSON representing the file
     * @param  {Array}  documents       An array of JSON documents having a `_type` and `_id` field.
     * @returns {object}                The JSON API conformant response.
     */

  }, {
    key: "addReferencedBy",
    value: function addReferencedBy(document, documents) {
      var refs = documents.map(function (d) {
        return {
          id: d._id,
          type: d._type
        };
      });
      return this.stackClient.fetchJSON('POST', (0, _utils.uri)(_templateObject2(), document._id), {
        data: refs
      });
    }
    /**
     *  Remove referenced_by documents from a file — see https://docs.cozy.io/en/cozy-stack/references-docs-in-vfs/#delete-filesfile-idrelationshipsreferenced_by
     *
     *  For example, to remove an album reference from a file:
     * ```
     *  removeReferencedBy({_id: 123, _type: "io.cozy.files", name: "cozy.jpg"}, [{_id: 456, _type: "io.cozy.photos.albums", name: "Happy Cloud"}])
     * ```
     *
     * @param  {object} document        A JSON representing the file
     * @param  {Array}  documents       An array of JSON documents having a `_type` and `_id` field.
     * @returns {object}                The JSON API conformant response.
     */

  }, {
    key: "removeReferencedBy",
    value: function removeReferencedBy(document, documents) {
      var refs = documents.map(function (d) {
        return {
          id: d._id,
          type: d._type
        };
      });
      return this.stackClient.fetchJSON('DELETE', (0, _utils.uri)(_templateObject3(), document._id), {
        data: refs
      });
    }
    /**
     *  Add files references to a document — see https://docs.cozy.io/en/cozy-stack/references-docs-in-vfs/#post-datatypedoc-idrelationshipsreferences
     *
     *  For example, to add a photo to an album:
     * ```
     *  addReferencesTo({_id: 456, _type: "io.cozy.photos.albums", name: "Happy Cloud"}, [{_id: 123, _type: "io.cozy.files", name: "cozy.jpg"}])
     * ```
     *
     * @param  {object} document        A JSON representing a document, with at least a `_type` and `_id` field.
     * @param  {Array}  documents       An array of JSON files having an `_id` field.
     * @returns {object}                The JSON API conformant response.
     */

  }, {
    key: "addReferencesTo",
    value: function addReferencesTo(document, documents) {
      var refs = documents.map(function (d) {
        return {
          id: d._id,
          type: 'io.cozy.files'
        };
      });
      return this.stackClient.fetchJSON('POST', (0, _utils.uri)(_templateObject4(), document._type, document._id), {
        data: refs
      });
    }
    /**
     *  Remove files references to a document — see https://docs.cozy.io/en/cozy-stack/references-docs-in-vfs/#delete-datatypedoc-idrelationshipsreferences
     *
     *  For example, to remove a photo from an album:
     * ```
     *  removeReferencesTo({_id: 456, _type: "io.cozy.photos.albums", name: "Happy Cloud"}, [{_id: 123, _type: "io.cozy.files", name: "cozy.jpg"}])
     * ```
     *
     * @param  {object} document        A JSON representing a document, with at least a `_type` and `_id` field.
     * @param  {Array}  documents       An array of JSON files having an `_id` field.
     * @returns {object}                The JSON API conformant response.
     */

  }, {
    key: "removeReferencesTo",
    value: function removeReferencesTo(document, documents) {
      var refs = documents.map(function (d) {
        return {
          id: d._id,
          type: 'io.cozy.files'
        };
      });
      return this.stackClient.fetchJSON('DELETE', (0, _utils.uri)(_templateObject5(), document._type, document._id), {
        data: refs
      });
    }
    /**
     * Sends file to trash and removes references to it
     *
     * @param  {FileDocument} file - File that will be sent to trash
     * @returns {Promise} - Resolves when references have been removed
     * and file has been sent to trash
     */

  }, {
    key: "destroy",
    value: function () {
      var _destroy = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee3(file) {
        var _ref4,
            _ref4$ifMatch,
            ifMatch,
            _id,
            relationships,
            _iteratorNormalCompletion,
            _didIteratorError,
            _iteratorError,
            _iterator,
            _step,
            ref,
            resp,
            _args3 = arguments;

        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _ref4 = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {}, _ref4$ifMatch = _ref4.ifMatch, ifMatch = _ref4$ifMatch === void 0 ? '' : _ref4$ifMatch;
                _id = file._id, relationships = file.relationships;

                if (!(relationships && relationships.referenced_by && Array.isArray(relationships.referenced_by.data))) {
                  _context3.next = 29;
                  break;
                }

                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context3.prev = 6;
                _iterator = relationships.referenced_by.data[Symbol.iterator]();

              case 8:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context3.next = 15;
                  break;
                }

                ref = _step.value;
                _context3.next = 12;
                return this.removeReferencesTo({
                  _id: ref.id,
                  _type: ref.type
                }, [{
                  _id: _id
                }]);

              case 12:
                _iteratorNormalCompletion = true;
                _context3.next = 8;
                break;

              case 15:
                _context3.next = 21;
                break;

              case 17:
                _context3.prev = 17;
                _context3.t0 = _context3["catch"](6);
                _didIteratorError = true;
                _iteratorError = _context3.t0;

              case 21:
                _context3.prev = 21;
                _context3.prev = 22;

                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }

              case 24:
                _context3.prev = 24;

                if (!_didIteratorError) {
                  _context3.next = 27;
                  break;
                }

                throw _iteratorError;

              case 27:
                return _context3.finish(24);

              case 28:
                return _context3.finish(21);

              case 29:
                _context3.next = 31;
                return this.stackClient.fetchJSON('DELETE', (0, _utils.uri)(_templateObject6(), _id), undefined, {
                  headers: {
                    'If-Match': ifMatch
                  }
                });

              case 31:
                resp = _context3.sent;
                return _context3.abrupt("return", {
                  data: normalizeFile(resp.data)
                });

              case 33:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[6, 17, 21, 29], [22,, 24, 28]]);
      }));

      return function destroy(_x3) {
        return _destroy.apply(this, arguments);
      };
    }()
    /**
     * Empty the Trash
     */

  }, {
    key: "emptyTrash",
    value: function emptyTrash() {
      return this.stackClient.fetchJSON('DELETE', '/files/trash');
    }
    /**
     * Restores a trashed file.
     *
     * @param {string} id   - The file's id
     * @returns {Promise}   - A promise that returns the restored file if resolved.
     * @throws {FetchError}
     *
     */

  }, {
    key: "restore",
    value: function restore(id) {
      return this.stackClient.fetchJSON('POST', (0, _utils.uri)(_templateObject7(), id));
    }
    /**
     * async deleteFilePermanently - Definitely delete a file
     *
     * @param  {string} id - The id of the file to delete
     * @returns {object} The deleted file object
     */

  }, {
    key: "deleteFilePermanently",
    value: function () {
      var _deleteFilePermanently = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee4(id) {
        var resp;
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.stackClient.fetchJSON('PATCH', (0, _utils.uri)(_templateObject8(), id), {
                  data: {
                    type: 'io.cozy.files',
                    id: id,
                    attributes: {
                      permanent_delete: true
                    }
                  }
                });

              case 2:
                resp = _context4.sent;
                return _context4.abrupt("return", resp.data);

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function deleteFilePermanently(_x4) {
        return _deleteFilePermanently.apply(this, arguments);
      };
    }()
    /**
     * @param {File|Blob|Stream|string|ArrayBuffer} data file to be uploaded
     * @param {string} dirPath Path to upload the file to. ie : /Administative/XXX/
     * @returns {object} Created io.cozy.files
     */

  }, {
    key: "upload",
    value: function () {
      var _upload = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee5(data, dirPath) {
        var dirId;
        return _regenerator.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.ensureDirectoryExists(dirPath);

              case 2:
                dirId = _context5.sent;
                return _context5.abrupt("return", this.createFile(data, {
                  dirId: dirId
                }));

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function upload(_x5, _x6) {
        return _upload.apply(this, arguments);
      };
    }()
    /**
     * Creates directory or file.
     * - Used by StackLink to support CozyClient.create('io.cozy.files', options)
     *
     * @param {FileAttributes|DirectoryAttributes} attributes - Attributes of the created file/directory
     * @param {File|Blob|string|ArrayBuffer} attributes.data Will be used as content of the created file
     */

  }, {
    key: "create",
    value: function () {
      var _create = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee6(attributes) {
        var data, createFileOptions;
        return _regenerator.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                if (!(attributes.type === 'directory')) {
                  _context6.next = 4;
                  break;
                }

                return _context6.abrupt("return", this.createDirectory(attributes));

              case 4:
                data = attributes.data, createFileOptions = (0, _objectWithoutProperties2.default)(attributes, ["data"]);
                return _context6.abrupt("return", this.createFile(data, createFileOptions));

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function create(_x7) {
        return _create.apply(this, arguments);
      };
    }()
    /***
     * Update the io.cozy.files
     * Used by StackLink to support CozyClient.save({file})
     * @param {FileAttributes}  The file with its new content
     * @returns {FileAttributes} Updated document
     */

  }, {
    key: "update",
    value: function () {
      var _update = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee7(file) {
        return _regenerator.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                return _context7.abrupt("return", this.updateAttributes(file.id, file));

              case 1:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function update(_x8) {
        return _update.apply(this, arguments);
      };
    }()
    /**
     * Creates a file
     *
     * @private
     * @param {File|Blob|Stream|string|ArrayBuffer} data file to be uploaded
     * @param {FileAttributes} params Additional parameters
     * @param  {object}  params.options     Options to pass to doUpload method (additional headers)
     */

  }, {
    key: "createFile",
    value: function () {
      var _createFile = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee8(data) {
        var _ref5,
            nameOption,
            _ref5$dirId,
            dirId,
            executableOption,
            metadata,
            options,
            name,
            executable,
            metadataId,
            meta,
            path,
            _args8 = arguments;

        return _regenerator.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _ref5 = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};
                nameOption = _ref5.name, _ref5$dirId = _ref5.dirId, dirId = _ref5$dirId === void 0 ? '' : _ref5$dirId, executableOption = _ref5.executable, metadata = _ref5.metadata, options = (0, _objectWithoutProperties2.default)(_ref5, ["name", "dirId", "executable", "metadata"]);
                name = nameOption;
                executable = executableOption; // handle case where data is a file and contains the name

                if (!name && typeof data.name === 'string') {
                  name = data.name;
                }

                name = sanitizeFileName(name);

                if (!(typeof name !== 'string' || name === '')) {
                  _context8.next = 8;
                  break;
                }

                throw new Error('missing name argument');

              case 8:
                if (executable === undefined) {
                  executable = false;
                }

                metadataId = '';

                if (!metadata) {
                  _context8.next = 15;
                  break;
                }

                _context8.next = 13;
                return this.createFileMetadata(metadata);

              case 13:
                meta = _context8.sent;
                metadataId = meta.data.id;

              case 15:
                path = (0, _utils.uri)(_templateObject9(), dirId, name, executable, metadataId);
                return _context8.abrupt("return", this.doUpload(data, path, options));

              case 17:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function createFile(_x9) {
        return _createFile.apply(this, arguments);
      };
    }()
    /**
     * updateFile - Updates a file's data
     *
     * @param  {object}  data               Javascript File object
     * @param  {object}  params             Additional parameters
     * @param  {string}  params.fileId      The id of the file to update (required)
     * @param  {boolean} params.executable  Whether the file is executable or not
     * @param  {object}  params.metadata    Metadata to be attached to the File io.cozy.file
     * @param  {object}  params.options     Options to pass to doUpload method (additional headers)
     * @returns {object}                     Updated document
     */

  }, {
    key: "updateFile",
    value: function () {
      var _updateFile = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee9(data) {
        var _ref6,
            _ref6$executable,
            executable,
            fileId,
            metadata,
            options,
            name,
            metadataId,
            path,
            meta,
            _args9 = arguments;

        return _regenerator.default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _ref6 = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};
                _ref6$executable = _ref6.executable, executable = _ref6$executable === void 0 ? false : _ref6$executable, fileId = _ref6.fileId, metadata = _ref6.metadata, options = (0, _objectWithoutProperties2.default)(_ref6, ["executable", "fileId", "metadata"]);

                if (!(!fileId || typeof fileId !== 'string')) {
                  _context9.next = 4;
                  break;
                }

                throw new Error('missing fileId argument');

              case 4:
                if (!(typeof data.name !== 'string')) {
                  _context9.next = 6;
                  break;
                }

                throw new Error('missing name in data argument');

              case 6:
                name = sanitizeFileName(data.name);

                if (!(typeof name !== 'string' || name === '')) {
                  _context9.next = 9;
                  break;
                }

                throw new Error('missing name argument');

              case 9:
                path = (0, _utils.uri)(_templateObject10(), fileId, name, executable);

                if (!metadata) {
                  _context9.next = 16;
                  break;
                }

                _context9.next = 13;
                return this.createFileMetadata(metadata);

              case 13:
                meta = _context9.sent;
                metadataId = meta.data.id;
                path = path + "&MetadataID=".concat(metadataId);

              case 16:
                return _context9.abrupt("return", this.doUpload(data, path, options, 'PUT'));

              case 17:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function updateFile(_x10) {
        return _updateFile.apply(this, arguments);
      };
    }()
  }, {
    key: "getDownloadLinkById",
    value: function getDownloadLinkById(id, filename) {
      return this.stackClient.fetchJSON('POST', (0, _utils.uri)(_templateObject11(), id, filename)).then(this.extractResponseLinkRelated);
    }
  }, {
    key: "getDownloadLinkByRevision",
    value: function getDownloadLinkByRevision(versionId, filename) {
      return this.stackClient.fetchJSON('POST', (0, _utils.uri)(_templateObject12(), versionId, filename)).then(this.extractResponseLinkRelated);
    }
  }, {
    key: "getDownloadLinkByPath",
    value: function getDownloadLinkByPath(path) {
      return this.stackClient.fetchJSON('POST', (0, _utils.uri)(_templateObject13(), path)).then(this.extractResponseLinkRelated);
    }
  }, {
    key: "download",

    /**
     * Download a file or a specific version of the file
     *
     * @param {object} file io.cozy.files object
     * @param {string} versionId Id of the io.cozy.files.version
     * @param {string} filename The name you want for the downloaded file
     *                            (by default the same as the file)
     */
    value: function () {
      var _download = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee10(file) {
        var versionId,
            filename,
            href,
            filenameToUse,
            _args10 = arguments;
        return _regenerator.default.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                versionId = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : null;
                filename = _args10.length > 2 && _args10[2] !== undefined ? _args10[2] : undefined;
                filenameToUse = filename ? filename : file.name;
                /**
                 * Passing a filename to forceFileDownload is not enough
                 * for a few browsers since the stack's response header will
                 * not contain that name. Passing the filename to
                 * getDownloadLinkBy{Id,Revision} will ask the stack to
                 * return this filename in its content-disposition
                 * header response
                 */

                if (versionId) {
                  _context10.next = 9;
                  break;
                }

                _context10.next = 6;
                return this.getDownloadLinkById(file._id, filenameToUse);

              case 6:
                href = _context10.sent;
                _context10.next = 12;
                break;

              case 9:
                _context10.next = 11;
                return this.getDownloadLinkByRevision(versionId, filenameToUse);

              case 11:
                href = _context10.sent;

              case 12:
                (0, _utils.forceFileDownload)("".concat(href, "?Dl=1"), filenameToUse);

              case 13:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function download(_x11) {
        return _download.apply(this, arguments);
      };
    }()
    /**
     * Fetch the binary of a file or a specific version of a file
     * Useful for instance when you can't download the file directly
     * (via a content-disposition attachement header) and need to store
     * it before doing an operation.
     *
     * @param {string} id Id of the io.cozy.files or io.cozy.files.version
     *
     */

  }, {
    key: "fetchFileContent",
    value: function () {
      var _fetchFileContent = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee11(id) {
        return _regenerator.default.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                return _context11.abrupt("return", this.stackClient.fetch('GET', "/files/download/".concat(id)));

              case 1:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function fetchFileContent(_x12) {
        return _fetchFileContent.apply(this, arguments);
      };
    }()
    /**
     * Get a beautified size for a given file
     * 1024B => 1KB
     * 102404500404B => 95.37 GB
     *
     * @param {object} file io.cozy.files object
     * @param {number} decimal number of decimal
     */

  }, {
    key: "getBeautifulSize",
    value: function getBeautifulSize(file, decimal) {
      return (0, _utils.formatBytes)(parseInt(file.size), decimal);
    }
  }, {
    key: "downloadArchive",
    value: function () {
      var _downloadArchive = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee12(fileIds) {
        var notSecureFilename,
            filename,
            href,
            fullpath,
            _args12 = arguments;
        return _regenerator.default.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                notSecureFilename = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : 'files';
                filename = (0, _utils.slugify)(notSecureFilename);
                _context12.next = 4;
                return this.getArchiveLinkByIds(fileIds, filename);

              case 4:
                href = _context12.sent;
                fullpath = this.stackClient.fullpath(href);
                (0, _utils.forceFileDownload)(fullpath, filename + '.zip');

              case 7:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function downloadArchive(_x13) {
        return _downloadArchive.apply(this, arguments);
      };
    }()
  }, {
    key: "getArchiveLinkByIds",
    value: function () {
      var _getArchiveLinkByIds = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee13(ids) {
        var name,
            resp,
            _args13 = arguments;
        return _regenerator.default.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                name = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : 'files';
                _context13.next = 3;
                return this.stackClient.fetchJSON('POST', '/files/archive', {
                  data: {
                    type: 'io.cozy.archives',
                    attributes: {
                      name: name,
                      ids: ids
                    }
                  }
                });

              case 3:
                resp = _context13.sent;
                return _context13.abrupt("return", resp.links.related);

              case 5:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function getArchiveLinkByIds(_x14) {
        return _getArchiveLinkByIds.apply(this, arguments);
      };
    }()
    /**
     * Checks if the file belongs to the parent's hierarchy.
     *
     * @param  {string|object}  child    The file which can either be an id or an object
     * @param  {string|object}  parent   The parent target which can either be an id or an object
     * @returns {boolean}                 Whether the file is a parent's child
     */

  }, {
    key: "isChildOf",
    value: function () {
      var _isChildOf = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee14(child, parent) {
        var _this2 = this;

        var _ref7, childID, childDirID, childPath, _ref8, parentID, childDoc, currPath, targetsPath, newPath;

        return _regenerator.default.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _ref7 = typeof child === 'object' ? child : {
                  _id: child
                }, childID = _ref7._id, childDirID = _ref7.dirID, childPath = _ref7.path;
                _ref8 = typeof parent === 'object' ? parent : {
                  _id: parent
                }, parentID = _ref8._id;

                if (!(childID === parentID || childDirID === parentID)) {
                  _context14.next = 4;
                  break;
                }

                return _context14.abrupt("return", true);

              case 4:
                if (childPath) {
                  _context14.next = 10;
                  break;
                }

                _context14.next = 7;
                return this.statById(childID);

              case 7:
                childDoc = _context14.sent;
                childPath = childDoc.data.path;
                childDirID = childDoc.data.dirID;

              case 10:
                // Build hierarchy paths
                currPath = childPath;
                targetsPath = [childPath];

                while (currPath != '') {
                  newPath = dirName(currPath);

                  if (newPath != '') {
                    targetsPath.push(newPath);
                  }

                  currPath = newPath;
                }

                targetsPath.reverse(); // Look for all hierarchy in parallel and return true as soon as a dir is the searched parent

                return _context14.abrupt("return", raceWithCondition(targetsPath.map(function (path) {
                  return _this2.statByPath(path);
                }), function (stat) {
                  return stat.data._id == parentID;
                }));

              case 15:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function isChildOf(_x15, _x16) {
        return _isChildOf.apply(this, arguments);
      };
    }()
    /**
     * statById - Fetches the metadata about a document. For folders, the results include the list of child files and folders.
     *
     * @param {string}   id           ID of the document
     * @param {object} [options={}] Description
     * @param {number} [options.page[limit]] Max number of children documents to return
     * @param {number} [options.page[skip]] Number of children documents to skip from the start
     * @param {string} [options.page[cursor]] A cursor id for pagination
     *
     * @returns {object} A promise resolving to an object containing "data" (the document metadata), "included" (the child documents) and "links" (pagination informations)
     */

  }, {
    key: "statById",
    value: function () {
      var _statById = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee15(id) {
        var options,
            params,
            url,
            path,
            resp,
            _args15 = arguments;
        return _regenerator.default.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                options = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : {};
                params = (0, _pick.default)(options, ['page[limit]', 'page[skip]', 'page[cursor]']);
                url = (0, _utils.uri)(_templateObject14(), id);
                path = querystring.buildURL(url, params);
                _context15.next = 6;
                return this.stackClient.fetchJSON('GET', path);

              case 6:
                resp = _context15.sent;
                return _context15.abrupt("return", {
                  data: normalizeFile(resp.data),
                  included: resp.included && resp.included.map(function (f) {
                    return normalizeFile(f);
                  }),
                  links: resp.links
                });

              case 8:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function statById(_x17) {
        return _statById.apply(this, arguments);
      };
    }()
  }, {
    key: "statByPath",
    value: function () {
      var _statByPath = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee16(path) {
        var resp;
        return _regenerator.default.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return this.stackClient.fetchJSON('GET', (0, _utils.uri)(_templateObject15(), path));

              case 2:
                resp = _context16.sent;
                return _context16.abrupt("return", {
                  data: normalizeFile(resp.data),
                  included: resp.included && resp.included.map(function (f) {
                    return normalizeFile(f);
                  })
                });

              case 4:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function statByPath(_x18) {
        return _statByPath.apply(this, arguments);
      };
    }()
    /**
     * Create directory
     *
     * @private
     * @param  {DirectoryAttributes} attributes - Attributes of the directory
     * @returns {Promise}
     */

  }, {
    key: "createDirectory",
    value: function () {
      var _createDirectory = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee17() {
        var attributes,
            name,
            dirId,
            lastModifiedDate,
            safeName,
            lastModified,
            resp,
            _args17 = arguments;
        return _regenerator.default.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                attributes = _args17.length > 0 && _args17[0] !== undefined ? _args17[0] : {};
                name = attributes.name, dirId = attributes.dirId, lastModifiedDate = attributes.lastModifiedDate;
                safeName = sanitizeFileName(name);

                if (!(typeof name !== 'string' || safeName === '')) {
                  _context17.next = 5;
                  break;
                }

                throw new Error('missing name argument');

              case 5:
                lastModified = lastModifiedDate && (typeof lastModifiedDate === 'string' ? new Date(lastModifiedDate) : lastModifiedDate);
                _context17.next = 8;
                return this.stackClient.fetchJSON('POST', (0, _utils.uri)(_templateObject16(), dirId, safeName), undefined, {
                  headers: {
                    Date: lastModified ? lastModified.toGMTString() : ''
                  }
                });

              case 8:
                resp = _context17.sent;
                return _context17.abrupt("return", {
                  data: normalizeFile(resp.data)
                });

              case 10:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      return function createDirectory() {
        return _createDirectory.apply(this, arguments);
      };
    }()
  }, {
    key: "ensureDirectoryExists",
    value: function () {
      var _ensureDirectoryExists = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee18(path) {
        var resp;
        return _regenerator.default.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                if (this.specialDirectories[path]) {
                  _context18.next = 5;
                  break;
                }

                _context18.next = 3;
                return this.createDirectoryByPath(path);

              case 3:
                resp = _context18.sent;
                this.specialDirectories[path] = resp.data._id;

              case 5:
                return _context18.abrupt("return", this.specialDirectories[path]);

              case 6:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      return function ensureDirectoryExists(_x19) {
        return _ensureDirectoryExists.apply(this, arguments);
      };
    }()
  }, {
    key: "getDirectoryOrCreate",
    value: function () {
      var _getDirectoryOrCreate = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee19(name, parentDirectory) {
        var safeName, path, stat, parsedError, errors;
        return _regenerator.default.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                if (!(parentDirectory && !parentDirectory.attributes)) {
                  _context19.next = 2;
                  break;
                }

                throw new Error('Malformed parent directory');

              case 2:
                safeName = sanitizeFileName(name);
                path = "".concat(parentDirectory._id === ROOT_DIR_ID ? '' : parentDirectory.attributes.path, "/").concat(safeName);
                _context19.prev = 4;
                _context19.next = 7;
                return this.statByPath(path || '/');

              case 7:
                stat = _context19.sent;
                return _context19.abrupt("return", stat);

              case 11:
                _context19.prev = 11;
                _context19.t0 = _context19["catch"](4);
                parsedError = JSON.parse(_context19.t0.message);
                errors = parsedError.errors;

                if (!(errors && errors.length && errors[0].status === '404')) {
                  _context19.next = 17;
                  break;
                }

                return _context19.abrupt("return", this.createDirectory({
                  name: safeName,
                  dirId: parentDirectory && parentDirectory._id
                }));

              case 17:
                throw errors;

              case 18:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this, [[4, 11]]);
      }));

      return function getDirectoryOrCreate(_x20, _x21) {
        return _getDirectoryOrCreate.apply(this, arguments);
      };
    }()
    /**
     * async createDirectoryByPath - Creates one or more folders until the given path exists
     *
     * @param  {string} path - Path of the created directory
     * @returns {object} The document corresponding to the last segment of the path
     */

  }, {
    key: "createDirectoryByPath",
    value: function () {
      var _createDirectoryByPath = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee20(path) {
        var parts, root, parentDir, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, part;

        return _regenerator.default.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                parts = path.split('/').filter(function (part) {
                  return part !== '';
                });
                _context20.next = 3;
                return this.statById(ROOT_DIR_ID);

              case 3:
                root = _context20.sent;

                if (parts.length) {
                  _context20.next = 6;
                  break;
                }

                return _context20.abrupt("return", root);

              case 6:
                parentDir = root;
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _iteratorError2 = undefined;
                _context20.prev = 10;
                _iterator2 = parts[Symbol.iterator]();

              case 12:
                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                  _context20.next = 20;
                  break;
                }

                part = _step2.value;
                _context20.next = 16;
                return this.getDirectoryOrCreate(part, parentDir.data);

              case 16:
                parentDir = _context20.sent;

              case 17:
                _iteratorNormalCompletion2 = true;
                _context20.next = 12;
                break;

              case 20:
                _context20.next = 26;
                break;

              case 22:
                _context20.prev = 22;
                _context20.t0 = _context20["catch"](10);
                _didIteratorError2 = true;
                _iteratorError2 = _context20.t0;

              case 26:
                _context20.prev = 26;
                _context20.prev = 27;

                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                  _iterator2.return();
                }

              case 29:
                _context20.prev = 29;

                if (!_didIteratorError2) {
                  _context20.next = 32;
                  break;
                }

                throw _iteratorError2;

              case 32:
                return _context20.finish(29);

              case 33:
                return _context20.finish(26);

              case 34:
                return _context20.abrupt("return", parentDir);

              case 35:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this, [[10, 22, 26, 34], [27,, 29, 33]]);
      }));

      return function createDirectoryByPath(_x22) {
        return _createDirectoryByPath.apply(this, arguments);
      };
    }()
    /**
     *
     * async updateAttributes - Updates a file / folder's attributes except
     * the metadata attribute. If you want to update its metadata attribute,
     * then use `updateFileMetadataAttribute` since `metadata` is a specific
     * doctype.
     *
     * For instance, if you want to update the name of a file, you can pass
     * attributes = { name: 'newName'}
     *
     * You can see the attributes for both Folder and File (as they share the
     * same doctype they have a few in common) here :
     * https://docs.cozy.io/en/cozy-doctypes/docs/io.cozy.files/#iocozyfiles
     *
     * @private You shoud use update() directly.
     * @param  {string} id         File id
     * @param  {object} attributes New file attributes
     * @returns {object}            Updated document
     */

  }, {
    key: "updateAttributes",
    value: function () {
      var _updateAttributes = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee21(id, attributes) {
        var resp;
        return _regenerator.default.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                _context21.next = 2;
                return this.stackClient.fetchJSON('PATCH', (0, _utils.uri)(_templateObject17(), id), {
                  data: {
                    type: 'io.cozy.files',
                    id: id,
                    attributes: attributes
                  }
                });

              case 2:
                resp = _context21.sent;
                return _context21.abrupt("return", {
                  data: normalizeFile(resp.data)
                });

              case 4:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      return function updateAttributes(_x23, _x24) {
        return _updateAttributes.apply(this, arguments);
      };
    }()
  }, {
    key: "updateFileMetadata",
    value: function () {
      var _updateFileMetadata = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee22(id, attributes) {
        return _regenerator.default.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                console.warn('CozyClient FileCollection updateFileMetadata method is deprecated. Use updateAttributes instead');
                return _context22.abrupt("return", this.updateAttributes(id, attributes));

              case 2:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      return function updateFileMetadata(_x25, _x26) {
        return _updateFileMetadata.apply(this, arguments);
      };
    }()
    /**
     * Send a metadata object that can be associated to a file uploaded after that,
     * via the MetadataID query parameter.
     * See https://github.com/cozy/cozy-stack/blob/master/docs/files.md#post-filesuploadmetadata
     *
     * @param {object} attributes The file's metadata
     * @returns {object}          The Metadata object
     */

  }, {
    key: "createFileMetadata",
    value: function () {
      var _createFileMetadata = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee23(attributes) {
        var resp;
        return _regenerator.default.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                _context23.next = 2;
                return this.stackClient.fetchJSON('POST', (0, _utils.uri)(_templateObject18()), {
                  data: {
                    type: 'io.cozy.files.metadata',
                    attributes: attributes
                  }
                });

              case 2:
                resp = _context23.sent;
                return _context23.abrupt("return", {
                  data: resp.data
                });

              case 4:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      return function createFileMetadata(_x27) {
        return _createFileMetadata.apply(this, arguments);
      };
    }()
    /**
     *
     * Updates the metadata attribute of a io.cozy.files
     * Creates a new version of the file without having
     * to upload again the file's content
     *
     * To see available content of the metadata attribute
     * see : https://docs.cozy.io/en/cozy-doctypes/docs/io.cozy.files_metadata/
     *
     * @param {string} id File id
     * @param {object} metadata io.cozy.files.metadata attributes
     * @returns {object} io.cozy.files updated
     */

  }, {
    key: "updateMetadataAttribute",
    value: function () {
      var _updateMetadataAttribute = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee24(id, metadata) {
        var resp;
        return _regenerator.default.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                _context24.next = 2;
                return this.stackClient.fetchJSON('POST', (0, _utils.uri)(_templateObject19(), id), {
                  data: {
                    type: 'io.cozy.files.metadata',
                    attributes: metadata
                  }
                });

              case 2:
                resp = _context24.sent;
                return _context24.abrupt("return", {
                  data: resp.data
                });

              case 4:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      return function updateMetadataAttribute(_x28, _x29) {
        return _updateMetadataAttribute.apply(this, arguments);
      };
    }()
    /**
     *
     * This method should not be called directly to upload a file.
     * You should use `createFile`
     *
     * @param {File|Blob|Stream|string|ArrayBuffer} dataArg file to be uploaded
     * @param {string} path Uri to call the stack from. Something like
     * `/files/${dirId}?Name=${name}&Type=file&Executable=${executable}&MetadataID=${metadataId}`
     * @param {object} options Additional headers
     * @param {string} method POST / PUT / PATCH
     */

  }, {
    key: "doUpload",
    value: function () {
      var _doUpload = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee25(dataArg, path, options) {
        var method,
            data,
            isBuffer,
            isFile,
            isBlob,
            isStream,
            isString,
            _ref9,
            contentType,
            contentLength,
            checksum,
            lastModifiedDate,
            ifMatch,
            headers,
            resp,
            _args25 = arguments;

        return _regenerator.default.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                method = _args25.length > 3 && _args25[3] !== undefined ? _args25[3] : 'POST';
                data = dataArg;

                if (data) {
                  _context25.next = 4;
                  break;
                }

                throw new Error('missing data argument');

              case 4:
                // transform any ArrayBufferView to ArrayBuffer
                if (data.buffer && data.buffer instanceof ArrayBuffer) {
                  data = data.buffer;
                }

                isBuffer = typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer;
                isFile = typeof File !== 'undefined' && data instanceof File;
                isBlob = typeof Blob !== 'undefined' && data instanceof Blob;
                isStream = data.readable === true && typeof data.pipe === 'function';
                isString = typeof data === 'string';

                if (!(!isBuffer && !isFile && !isBlob && !isStream && !isString)) {
                  _context25.next = 12;
                  break;
                }

                throw new Error('invalid data type');

              case 12:
                _ref9 = options || {}, contentType = _ref9.contentType, contentLength = _ref9.contentLength, checksum = _ref9.checksum, lastModifiedDate = _ref9.lastModifiedDate, ifMatch = _ref9.ifMatch;

                if (!contentType) {
                  if (isBuffer) {
                    contentType = CONTENT_TYPE_OCTET_STREAM;
                  } else if (isFile) {
                    contentType = data.type || getFileTypeFromName(data.name.toLowerCase()) || CONTENT_TYPE_OCTET_STREAM;

                    if (!lastModifiedDate) {
                      lastModifiedDate = data.lastModifiedDate;
                    }
                  } else if (isBlob) {
                    contentType = data.type || CONTENT_TYPE_OCTET_STREAM;
                  } else if (isStream) {
                    contentType = CONTENT_TYPE_OCTET_STREAM;
                  } else if (typeof data === 'string') {
                    contentType = 'text/plain';
                  }
                }

                if (lastModifiedDate && typeof lastModifiedDate === 'string') {
                  lastModifiedDate = new Date(lastModifiedDate);
                }

                headers = {
                  'Content-Type': contentType
                };
                if (contentLength) headers['Content-Length'] = String(contentLength);
                if (checksum) headers['Content-MD5'] = checksum;
                if (lastModifiedDate) headers['Date'] = lastModifiedDate.toGMTString();
                if (ifMatch) headers['If-Match'] = ifMatch;
                _context25.next = 22;
                return this.stackClient.fetchJSON(method, path, data, {
                  headers: headers,
                  onUploadProgress: options.onUploadProgress
                });

              case 22:
                resp = _context25.sent;
                return _context25.abrupt("return", {
                  data: normalizeFile(resp.data)
                });

              case 24:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      return function doUpload(_x30, _x31, _x32) {
        return _doUpload.apply(this, arguments);
      };
    }()
  }]);
  return FileCollection;
}(_DocumentCollection2.default);

var _default = FileCollection;
exports.default = _default;