"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _DocumentCollection2 = _interopRequireWildcard(require("./DocumentCollection"));

var _FileCollection = require("./FileCollection");

var _utils = require("./utils");

function _templateObject5() {
  var data = (0, _taggedTemplateLiteral2.default)(["/sharings/", "/recipients"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = (0, _taggedTemplateLiteral2.default)(["/sharings/", "/recipients/self"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = (0, _taggedTemplateLiteral2.default)(["/sharings/", "/recipients/", ""]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _taggedTemplateLiteral2.default)(["/sharings/", "/recipients"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2.default)(["/sharings/doctype/", ""]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var normalizeSharing = function normalizeSharing(sharing) {
  return (0, _DocumentCollection2.normalizeDoc)(sharing, 'io.cozy.sharings');
};
/**
 * Implements the `DocumentCollection` API along with specific methods for
 * `io.cozy.sharings`.
 */


var SharingCollection =
/*#__PURE__*/
function (_DocumentCollection) {
  (0, _inherits2.default)(SharingCollection, _DocumentCollection);

  function SharingCollection() {
    (0, _classCallCheck2.default)(this, SharingCollection);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SharingCollection).apply(this, arguments));
  }

  (0, _createClass2.default)(SharingCollection, [{
    key: "findByDoctype",
    value: function () {
      var _findByDoctype = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(doctype) {
        var resp;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.stackClient.fetchJSON('GET', (0, _utils.uri)(_templateObject(), doctype));

              case 2:
                resp = _context.sent;
                return _context.abrupt("return", (0, _objectSpread2.default)({}, resp, {
                  data: resp.data.map(normalizeSharing)
                }));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function findByDoctype(_x) {
        return _findByDoctype.apply(this, arguments);
      };
    }()
    /**
     * share - Creates a new sharing. See https://docs.cozy.io/en/cozy-stack/sharing/#post-sharings
     *
     * @param  {object} document The document to share. Should have and _id and a name.
     * @param  {Array} recipients A list of io.cozy.contacts
     * @param  {string} sharingType - If "two-way", will set the open_sharing attribute to true
     * @param  {string} description - Describes the sharing
     * @param  {string=} previewPath Relative URL of the sharings preview page
     */

  }, {
    key: "share",
    value: function () {
      var _share = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee2(document, recipients, sharingType, description) {
        var previewPath,
            resp,
            _args2 = arguments;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                previewPath = _args2.length > 4 && _args2[4] !== undefined ? _args2[4] : null;
                _context2.next = 3;
                return this.stackClient.fetchJSON('POST', '/sharings/', {
                  data: {
                    type: 'io.cozy.sharings',
                    attributes: {
                      description: description,
                      preview_path: previewPath,
                      open_sharing: sharingType === 'two-way',
                      rules: getSharingRules(document, sharingType)
                    },
                    relationships: {
                      recipients: {
                        data: recipients.map(function (_ref) {
                          var _id = _ref._id,
                              _type = _ref._type;
                          return {
                            id: _id,
                            type: _type
                          };
                        })
                      }
                    }
                  }
                });

              case 3:
                resp = _context2.sent;
                return _context2.abrupt("return", {
                  data: normalizeSharing(resp.data)
                });

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function share(_x2, _x3, _x4, _x5) {
        return _share.apply(this, arguments);
      };
    }()
    /**
     * getDiscoveryLink - Returns the URL of the page that can be used to accept a sharing. See https://docs.cozy.io/en/cozy-stack/sharing/#get-sharingssharing-iddiscovery
     *
     * @param  {string} sharingId - Id of the sharing
     * @param  {string} sharecode - Code of the sharing
     * @returns {string}
     */

  }, {
    key: "getDiscoveryLink",
    value: function getDiscoveryLink(sharingId, sharecode) {
      return this.stackClient.fullpath("/sharings/".concat(sharingId, "/discovery?sharecode=").concat(sharecode));
    }
    /**
     * Add an array of contacts to the Sharing
     *
     * @param {object} sharing Sharing Object
     * @param {Array} recipients Array of {id:1, type:"io.cozy.contacts"}
     * @param {string} sharingType Read and write: two-way. Other only read
     */

  }, {
    key: "addRecipients",
    value: function () {
      var _addRecipients = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee3(sharing, recipients, sharingType) {
        var recipientsPayload, resp;
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                recipientsPayload = {
                  data: recipients.map(function (_ref2) {
                    var _id = _ref2._id,
                        _type = _ref2._type;
                    return {
                      id: _id,
                      type: _type
                    };
                  })
                };
                _context3.next = 3;
                return this.stackClient.fetchJSON('POST', (0, _utils.uri)(_templateObject2(), sharing._id), {
                  data: {
                    type: 'io.cozy.sharings',
                    id: sharing._id,
                    relationships: sharingType === 'two-way' ? {
                      recipients: recipientsPayload
                    } : {
                      read_only_recipients: recipientsPayload
                    }
                  }
                });

              case 3:
                resp = _context3.sent;
                return _context3.abrupt("return", {
                  data: normalizeSharing(resp.data)
                });

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function addRecipients(_x6, _x7, _x8) {
        return _addRecipients.apply(this, arguments);
      };
    }()
    /**
     * Revoke only one recipient of the sharing.
     *
     * @param {object} sharing Sharing Object
     * @param {number} recipientIndex Index of this recipient in the members array of the sharing
     */

  }, {
    key: "revokeRecipient",
    value: function revokeRecipient(sharing, recipientIndex) {
      return this.stackClient.fetchJSON('DELETE', (0, _utils.uri)(_templateObject3(), sharing._id, recipientIndex));
    }
    /**
     * Remove self from the sharing.
     *
     * @param {object} sharing Sharing Object
     */

  }, {
    key: "revokeSelf",
    value: function revokeSelf(sharing) {
      return this.stackClient.fetchJSON('DELETE', (0, _utils.uri)(_templateObject4(), sharing._id));
    }
    /**
     * Revoke the sharing for all the members. Must be called
     * from the owner's cozy
     *
     * @param {object} sharing Sharing Objects
     */

  }, {
    key: "revokeAllRecipients",
    value: function revokeAllRecipients(sharing) {
      return this.stackClient.fetchJSON('DELETE', (0, _utils.uri)(_templateObject5(), sharing._id));
    }
  }]);
  return SharingCollection;
}(_DocumentCollection2.default);

SharingCollection.normalizeDoctype = _DocumentCollection2.default.normalizeDoctypeJsonApi; // Rules determine the behavior of the sharing when changes are made to the shared document
// See https://github.com/cozy/cozy-stack/blob/master/docs/sharing-design.md#description-of-a-sharing

var getSharingRules = function getSharingRules(document, sharingType) {
  var _id = document._id,
      _type = document._type;
  return (0, _FileCollection.isFile)(document) ? [(0, _objectSpread2.default)({
    title: document.name,
    doctype: 'io.cozy.files',
    values: [_id]
  }, getSharingPolicy(document, sharingType))] : [(0, _objectSpread2.default)({
    title: 'collection',
    doctype: _type,
    values: [_id]
  }, getSharingPolicy(document, sharingType)), (0, _objectSpread2.default)({
    title: 'items',
    doctype: 'io.cozy.files',
    values: ["".concat(_type, "/").concat(_id)],
    selector: 'referenced_by'
  }, sharingType === 'two-way' ? {
    add: 'sync',
    update: 'sync',
    remove: 'sync'
  } : {
    add: 'push',
    update: 'none',
    remove: 'push'
  })];
};

var getSharingPolicy = function getSharingPolicy(document, sharingType) {
  if ((0, _FileCollection.isFile)(document) && (0, _FileCollection.isDirectory)(document)) {
    return sharingType === 'two-way' ? {
      add: 'sync',
      update: 'sync',
      remove: 'sync'
    } : {
      add: 'push',
      update: 'push',
      remove: 'push'
    };
  }

  return sharingType === 'two-way' ? {
    update: 'sync',
    remove: 'revoke'
  } : {
    update: 'push',
    remove: 'revoke'
  };
};

var _default = SharingCollection;
exports.default = _default;