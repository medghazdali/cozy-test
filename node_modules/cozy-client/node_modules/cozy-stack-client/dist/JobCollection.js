"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.hasJobFinished = exports.normalizeJob = exports.JOBS_DOCTYPE = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _Collection = _interopRequireDefault(require("./Collection"));

var _DocumentCollection = require("./DocumentCollection");

var _utils = require("./utils");

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2.default)(["/jobs/", ""]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var JOBS_DOCTYPE = 'io.cozy.jobs';
exports.JOBS_DOCTYPE = JOBS_DOCTYPE;

var sleep = function sleep(delay) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, delay);
  });
};

var normalizeJob = function normalizeJob(job) {
  return (0, _objectSpread2.default)({}, job, (0, _DocumentCollection.normalizeDoc)(job, JOBS_DOCTYPE), job.attributes);
};

exports.normalizeJob = normalizeJob;

var hasJobFinished = function hasJobFinished(job) {
  return job.state === 'done' || job.state === 'errored';
};

exports.hasJobFinished = hasJobFinished;

var JobCollection =
/*#__PURE__*/
function () {
  function JobCollection(stackClient) {
    (0, _classCallCheck2.default)(this, JobCollection);
    this.stackClient = stackClient;
  }

  (0, _createClass2.default)(JobCollection, [{
    key: "queued",
    value: function queued(workerType) {
      return this.stackClient.fetchJSON('GET', "/jobs/queue/".concat(workerType));
    }
    /**
     * Creates a job
     *
     * @param  {string} workerType - Ex: "konnector"
     * @param  {object} args - Ex: {"slug": "my-konnector", "trigger": "trigger-id"}
     * @param  {object} options
     * @returns {object} createdJob
     */

  }, {
    key: "create",
    value: function create(workerType, args, options) {
      return this.stackClient.fetchJSON('POST', "/jobs/queue/".concat(workerType), {
        data: {
          type: JOBS_DOCTYPE,
          attributes: {
            arguments: args || {},
            options: options || {}
          }
        }
      });
    }
    /**
     * Return a normalized job, given its id
     */

  }, {
    key: "get",
    value: function () {
      var _get = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(id) {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", _Collection.default.get(this.stackClient, (0, _utils.uri)(_templateObject(), id), {
                  normalize: normalizeJob
                }));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function get(_x) {
        return _get.apply(this, arguments);
      };
    }()
    /**
     * Polls a job state until it is finished
     *
     * `options.until` can be used to tweak when to stop waiting. It will be
     * given the current job state. If true is returned, the awaiting is
     * stopped.
     */

  }, {
    key: "waitFor",
    value: function () {
      var _waitFor = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee2(id) {
        var _ref,
            _ref$onUpdate,
            onUpdate,
            _ref$until,
            until,
            _ref$delay,
            delay,
            _ref$timeout,
            timeout,
            start,
            jobData,
            now,
            _args2 = arguments;

        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _ref = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {}, _ref$onUpdate = _ref.onUpdate, onUpdate = _ref$onUpdate === void 0 ? null : _ref$onUpdate, _ref$until = _ref.until, until = _ref$until === void 0 ? hasJobFinished : _ref$until, _ref$delay = _ref.delay, delay = _ref$delay === void 0 ? 5 * 1000 : _ref$delay, _ref$timeout = _ref.timeout, timeout = _ref$timeout === void 0 ? 60 * 5 * 1000 : _ref$timeout;
                start = Date.now();
                _context2.next = 4;
                return this.get(id);

              case 4:
                jobData = _context2.sent.data.attributes;

              case 5:
                if (!(!jobData || !until(jobData))) {
                  _context2.next = 17;
                  break;
                }

                _context2.next = 8;
                return sleep(delay);

              case 8:
                _context2.next = 10;
                return this.get(id);

              case 10:
                jobData = _context2.sent.data.attributes;

                if (onUpdate) {
                  onUpdate(jobData);
                }

                now = Date.now();

                if (!(start - now > timeout)) {
                  _context2.next = 15;
                  break;
                }

                throw new Error('Timeout for JobCollection::waitFor');

              case 15:
                _context2.next = 5;
                break;

              case 17:
                return _context2.abrupt("return", jobData);

              case 18:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function waitFor(_x2) {
        return _waitFor.apply(this, arguments);
      };
    }()
  }]);
  return JobCollection;
}();

var _default = JobCollection;
exports.default = _default;